{
    "questions": [
        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 9.946524064171124
                },
                {
                    "label": "Liechtenstein",
                    "number": 6.77052127022169
                },
                {
                    "label": "Niger",
                    "number": 5.215047788397421
                },
                {
                    "label": "Djibouti",
                    "number": 5.116416150898909
                },
                {
                    "label": "Brunei",
                    "number": 5.067594592432606
                },
                {
                    "label": "Iran",
                    "number": 4.6967974965359405
                },
                {
                    "label": "Cameroon",
                    "number": 4.685465350285295
                },
                {
                    "label": "Aruba",
                    "number": 4.253112033195021
                },
                {
                    "label": "Germany",
                    "number": 4.132632219656246
                },
                {
                    "label": "Russia",
                    "number": 4.025043069527008
                }
            ],
            "answer": "Benin",
            "answerValue": 9.946524064171124,
            "question": "Which country was the most cooperative last year?",
            "rowIndex": 2,
            "approved": true,
            "params": {
                "codes": "('031', '030')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1000
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('031', '030') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('031', '030') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821133
        },
        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 3.1372549019607843
                },
                {
                    "label": "Armenia",
                    "number": 2.715272972523189
                },
                {
                    "label": "Niger",
                    "number": 1.9726605912424984
                },
                {
                    "label": "Cameroon",
                    "number": 1.7520183725169876
                },
                {
                    "label": "Chad",
                    "number": 1.6296712559707782
                },
                {
                    "label": "Iceland",
                    "number": 0.9528346831824679
                },
                {
                    "label": "Belarus",
                    "number": 0.805189675341446
                },
                {
                    "label": "Kazakhstan",
                    "number": 0.6832371304040523
                },
                {
                    "label": "Tajikistan",
                    "number": 0.662361318099023
                },
                {
                    "label": "Kyrgyzstan",
                    "number": 0.5552813425468904
                }
            ],
            "answer": "Benin",
            "answerValue": 3.1372549019607843,
            "question": "Which country had the most cooperative military last year?",
            "rowIndex": 14,
            "approved": true,
            "params": {
                "codes": "('0312')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0312') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0312') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "South Sudan",
                    "number": 178
                },
                {
                    "label": "Ukraine",
                    "number": 134
                },
                {
                    "label": "Somalia",
                    "number": 111
                },
                {
                    "label": "Central African Republic",
                    "number": 109
                },
                {
                    "label": "Mali",
                    "number": 96
                },
                {
                    "label": "Burundi",
                    "number": 77
                },
                {
                    "label": "United States",
                    "number": 70
                },
                {
                    "label": "Russia",
                    "number": 52
                },
                {
                    "label": "Sudan",
                    "number": 48
                },
                {
                    "label": "Lebanon",
                    "number": 44
                }
            ],
            "answer": "South Sudan",
            "answerValue": 178,
            "question": "Which country allowed the most peacekeepers into it last year?",
            "rowIndex": 25,
            "approved": true,
            "params": {
                "codes": "('0861')",
                "relation": "Actor1CountryCode",
                "year": 2015
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0861') THEN 1 ELSE 0 END) total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015 \nGROUP BY\n  codes.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  'userInput',\n  COUNT(*)\nFROM (\n  SELECT\n    events.GLOBALEVENTID,\n  FROM\n    [gdelt-bq:full.events] events\n  JOIN\n    [gdelt-bq:extra.countryinfo] codes\n  ON\n    events.Actor1CountryCode = codes.iso3\n  JOIN (\n    SELECT\n      *\n    FROM (\n      SELECT\n        sub,\n        obj AS alias,\n        CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n        SUM(input) OVER (PARTITION BY sub) AS input_alias\n      FROM\n        [fh-bigquery:freebase20140119.triples_lang_en]\n      WHERE\n        (pred = '/common/topic/alias'\n          OR pred = '/type/object/name'))\n    WHERE\n      input_alias > 0) aliases\n  ON\n    aliases.alias = codes.country\n  WHERE\n    Year = 2015\n    AND events.EventCode IN ('0861') \n  GROUP BY\n    events.GLOBALEVENTID)\n  IGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "United Kingdom",
                    "number": 29215
                },
                {
                    "label": "Indonesia",
                    "number": 27172
                },
                {
                    "label": "New Zealand",
                    "number": 26443
                },
                {
                    "label": "China",
                    "number": 23346
                },
                {
                    "label": "Canada",
                    "number": 14387
                },
                {
                    "label": "France",
                    "number": 12861
                },
                {
                    "label": "Japan",
                    "number": 11740
                },
                {
                    "label": "Malaysia",
                    "number": 8823
                },
                {
                    "label": "Syria",
                    "number": 7750
                },
                {
                    "label": "Iraq",
                    "number": 5816
                }
            ],
            "answer": "United Kingdom",
            "answerValue": 29215,
            "question": "Which country, other than the United States, was mentioned the most with Australia last year?",
            "rowIndex": 18,
            "approved": true,
            "params": {
                "country": "Australia",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Australia' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Australia' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761328085
        },
        {
            "top10": [
                {
                    "label": "Ivory Coast",
                    "number": 4.228673660242335
                },
                {
                    "label": "Guatemala",
                    "number": 3.5446125700346838
                },
                {
                    "label": "Guinea",
                    "number": 3.1391014322150284
                },
                {
                    "label": "Burkina Faso",
                    "number": 1.8883415435139572
                },
                {
                    "label": "Burundi",
                    "number": 1.857552276828362
                },
                {
                    "label": "Togo",
                    "number": 1.6151361329026304
                },
                {
                    "label": "Moldova",
                    "number": 1.5679323743949827
                },
                {
                    "label": "Honduras",
                    "number": 1.4513788098693758
                },
                {
                    "label": "Senegal",
                    "number": 1.2675036214389184
                },
                {
                    "label": "Antigua and Barbuda",
                    "number": 1.2619433928249504
                }
            ],
            "answer": "Ivory Coast",
            "answerValue": 4.228673660242335,
            "question": "Which country called for leadership change the most last year?",
            "rowIndex": 8,
            "approved": true,
            "params": {
                "codes": "('0241')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0241') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0241') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "Russia",
                    "number": 19881
                },
                {
                    "label": "Israel",
                    "number": 19541
                },
                {
                    "label": "Libya",
                    "number": 11203
                },
                {
                    "label": "United Kingdom",
                    "number": 11135
                },
                {
                    "label": "Saudi Arabia",
                    "number": 10472
                },
                {
                    "label": "Sudan",
                    "number": 7880
                },
                {
                    "label": "France",
                    "number": 7825
                },
                {
                    "label": "Palestinian Territory",
                    "number": 7749
                },
                {
                    "label": "Syria",
                    "number": 6826
                },
                {
                    "label": "Canada",
                    "number": 6261
                }
            ],
            "answer": "Russia",
            "answerValue": 19881,
            "question": "Which country, other than the United States, was mentioned with Egypt the most last year?",
            "rowIndex": 6,
            "approved": true,
            "params": {
                "country": "Egypt",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Egypt' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Egypt' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761320874
        },
        {
            "top10": [
                {
                    "label": "Brazil",
                    "number": 1.5230109029662877
                },
                {
                    "label": "Grenada",
                    "number": 1.036699149906697
                },
                {
                    "label": "Switzerland",
                    "number": 1.0303592317156693
                },
                {
                    "label": "Bangladesh",
                    "number": 0.9906644444703442
                },
                {
                    "label": "Zimbabwe",
                    "number": 0.6752080484799379
                },
                {
                    "label": "Lithuania",
                    "number": 0.669882100750268
                },
                {
                    "label": "Chile",
                    "number": 0.5642279480910288
                },
                {
                    "label": "Chad",
                    "number": 0.561955605507165
                },
                {
                    "label": "Rwanda",
                    "number": 0.4202828503582911
                },
                {
                    "label": "Nepal",
                    "number": 0.3592760587416356
                }
            ],
            "answer": "Brazil",
            "answerValue": 1.5230109029662877,
            "question": "Which country willingly shared the most intelligence last year?",
            "rowIndex": 16,
            "approved": true,
            "params": {
                "codes": "('0314')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 10000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0314') THEN 1 ELSE 0 END) * 10000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0314') THEN 1 ELSE 0 END) * 10000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "United States",
                    "number": 45173
                },
                {
                    "label": "United Kingdom",
                    "number": 6701
                },
                {
                    "label": "Pakistan",
                    "number": 4665
                },
                {
                    "label": "Israel",
                    "number": 4443
                },
                {
                    "label": "China",
                    "number": 4442
                },
                {
                    "label": "Nigeria",
                    "number": 4421
                },
                {
                    "label": "Egypt",
                    "number": 4144
                },
                {
                    "label": "France",
                    "number": 4133
                },
                {
                    "label": "Afghanistan",
                    "number": 3646
                },
                {
                    "label": "Russia",
                    "number": 3565
                }
            ],
            "answer": "United States",
            "answerValue": 45173,
            "question": "Which country released the most people from prison last year?",
            "rowIndex": 24,
            "approved": true,
            "params": {
                "codes": "('0841')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 3000
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0841') THEN 1 ELSE 0 END) total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015 \nGROUP BY\n  codes.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  'userInput',\n  COUNT(*)\nFROM (\n  SELECT\n    events.GLOBALEVENTID,\n  FROM\n    [gdelt-bq:full.events] events\n  JOIN\n    [gdelt-bq:extra.countryinfo] codes\n  ON\n    events.Actor1CountryCode = codes.iso3\n  JOIN (\n    SELECT\n      *\n    FROM (\n      SELECT\n        sub,\n        obj AS alias,\n        CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n        SUM(input) OVER (PARTITION BY sub) AS input_alias\n      FROM\n        [fh-bigquery:freebase20140119.triples_lang_en]\n      WHERE\n        (pred = '/common/topic/alias'\n          OR pred = '/type/object/name'))\n    WHERE\n      input_alias > 0) aliases\n  ON\n    aliases.alias = codes.country\n  WHERE\n    Year = 2015\n    AND events.EventCode IN ('0841') \n  GROUP BY\n    events.GLOBALEVENTID)\n  IGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 23087
                },
                {
                    "label": "Russia",
                    "number": 12343
                },
                {
                    "label": "Iran",
                    "number": 9079
                },
                {
                    "label": "Australia",
                    "number": 8981
                },
                {
                    "label": "United Kingdom",
                    "number": 8428
                },
                {
                    "label": "Canada",
                    "number": 8078
                },
                {
                    "label": "Japan",
                    "number": 7759
                },
                {
                    "label": "Vietnam",
                    "number": 5573
                },
                {
                    "label": "Turkey",
                    "number": 5503
                },
                {
                    "label": "Germany",
                    "number": 4727
                }
            ],
            "answer": "China",
            "answerValue": 23087,
            "question": "Which country, besides the United States, provided the most economic support to other countries last year?",
            "rowIndex": 17,
            "approved": true,
            "params": {
                "codes": "('061')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "filter_us": true
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('061') THEN 1 ELSE 0 END) total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015 \n  AND codes.country != 'United States'\nGROUP BY\n  codes.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  'userInput',\n  COUNT(*)\nFROM (\n  SELECT\n    events.GLOBALEVENTID,\n  FROM\n    [gdelt-bq:full.events] events\n  JOIN\n    [gdelt-bq:extra.countryinfo] codes\n  ON\n    events.Actor1CountryCode = codes.iso3\n  JOIN (\n    SELECT\n      *\n    FROM (\n      SELECT\n        sub,\n        obj AS alias,\n        CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n        SUM(input) OVER (PARTITION BY sub) AS input_alias\n      FROM\n        [fh-bigquery:freebase20140119.triples_lang_en]\n      WHERE\n        (pred = '/common/topic/alias'\n          OR pred = '/type/object/name'))\n    WHERE\n      input_alias > 0) aliases\n  ON\n    aliases.alias = codes.country\n  WHERE\n    Year = 2015\n    AND events.EventCode IN ('061') \n  AND codes.country != 'United States'\n  GROUP BY\n    events.GLOBALEVENTID)\n  IGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579150
        },
        {
            "top10": [
                {
                    "label": "Russia",
                    "number": 73351
                },
                {
                    "label": "Turkey",
                    "number": 62594
                },
                {
                    "label": "Iraq",
                    "number": 42881
                },
                {
                    "label": "Iran",
                    "number": 31910
                },
                {
                    "label": "United Kingdom",
                    "number": 30126
                },
                {
                    "label": "Lebanon",
                    "number": 27233
                },
                {
                    "label": "Israel",
                    "number": 21384
                },
                {
                    "label": "France",
                    "number": 19670
                },
                {
                    "label": "Jordan",
                    "number": 12994
                },
                {
                    "label": "Saudi Arabia",
                    "number": 12682
                }
            ],
            "answer": "Russia",
            "answerValue": 73351,
            "question": "Which country, other than the United States, was mentioned with Syria the most last year?",
            "rowIndex": 7,
            "approved": true,
            "params": {
                "country": "Syria",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Syria' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Syria' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761323284
        },
        {
            "top10": [
                {
                    "label": "Madagascar",
                    "number": 4.0657919053779334
                },
                {
                    "label": "Japan",
                    "number": 3.689461650384535
                },
                {
                    "label": "Mozambique",
                    "number": 3.173963423850068
                },
                {
                    "label": "Bolivia",
                    "number": 3.013056578506863
                },
                {
                    "label": "Turkey",
                    "number": 2.0064966318776682
                },
                {
                    "label": "Colombia",
                    "number": 1.8706805466544265
                },
                {
                    "label": "Samoa",
                    "number": 1.7812082529315718
                },
                {
                    "label": "Trinidad and Tobago",
                    "number": 1.7371409202609949
                },
                {
                    "label": "Armenia",
                    "number": 1.7288949405188476
                },
                {
                    "label": "South Korea",
                    "number": 1.6694584658969545
                }
            ],
            "answer": "Madagascar",
            "answerValue": 4.0657919053779334,
            "question": "Which country was apologized to the most last year?",
            "rowIndex": 22,
            "approved": true,
            "params": {
                "codes": "('055')",
                "relation": "Actor2CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1000
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('055') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor2CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('055') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor2CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380820594
        },
        {
            "top10": [
                {
                    "label": "Bolivia",
                    "number": 3.6363636363636362
                },
                {
                    "label": "Central African Republic",
                    "number": 2.4839577727178637
                },
                {
                    "label": "Democratic Republic of the Congo",
                    "number": 1.9504160887656032
                },
                {
                    "label": "Gambia",
                    "number": 1.9478635666625224
                },
                {
                    "label": "Benin",
                    "number": 1.7112299465240641
                },
                {
                    "label": "Panama",
                    "number": 1.5096238520568626
                },
                {
                    "label": "Senegal",
                    "number": 1.3882182520521487
                },
                {
                    "label": "Niger",
                    "number": 1.2780617915092243
                },
                {
                    "label": "Nigeria",
                    "number": 1.2008525023884766
                },
                {
                    "label": "Colombia",
                    "number": 1.129214389417648
                }
            ],
            "answer": "Bolivia",
            "answerValue": 3.6363636363636362,
            "question": "Which country was the most forgiving last year?",
            "rowIndex": 23,
            "approved": true,
            "params": {
                "codes": "('056')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('056') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('056') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821141
        },
        {
            "top10": [
                {
                    "label": "Cuba",
                    "number": 1.0214154878542856
                },
                {
                    "label": "Antigua and Barbuda",
                    "number": 0.360555255092843
                },
                {
                    "label": "North Korea",
                    "number": 0.35664834473209417
                },
                {
                    "label": "Libya",
                    "number": 0.3126029688833315
                },
                {
                    "label": "Ukraine",
                    "number": 0.21360039218432664
                },
                {
                    "label": "Ecuador",
                    "number": 0.1377676135893974
                },
                {
                    "label": "Venezuela",
                    "number": 0.11956001912960305
                },
                {
                    "label": "Chile",
                    "number": 0.0940379913485048
                },
                {
                    "label": "Slovakia",
                    "number": 0.08411490095470413
                },
                {
                    "label": "Sudan",
                    "number": 0.08228674874769855
                }
            ],
            "answer": "Cuba",
            "answerValue": 1.0214154878542856,
            "question": "Which country asked to ease economic sanctions the most last year?",
            "rowIndex": 5,
            "approved": true,
            "params": {
                "codes": "('0254')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0254') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0254') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "United Kingdom",
                    "number": 148231
                },
                {
                    "label": "China",
                    "number": 129654
                },
                {
                    "label": "Iran",
                    "number": 113828
                },
                {
                    "label": "Russia",
                    "number": 110351
                },
                {
                    "label": "Canada",
                    "number": 105030
                },
                {
                    "label": "France",
                    "number": 104969
                },
                {
                    "label": "Israel",
                    "number": 86381
                },
                {
                    "label": "Cuba",
                    "number": 77636
                },
                {
                    "label": "Mexico",
                    "number": 75061
                },
                {
                    "label": "Iraq",
                    "number": 65497
                }
            ],
            "answer": "United Kingdom",
            "answerValue": 148231,
            "question": "Which country was mentioned the most with the United States last year?",
            "rowIndex": 20,
            "approved": true,
            "params": {
                "country": "United States",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'United States' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'United States' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761343835
        },
        {
            "top10": [
                {
                    "label": "Canada",
                    "number": 7762
                },
                {
                    "label": "Spain",
                    "number": 4528
                },
                {
                    "label": "Cuba",
                    "number": 2996
                },
                {
                    "label": "Australia",
                    "number": 2966
                },
                {
                    "label": "United Kingdom",
                    "number": 2567
                },
                {
                    "label": "China",
                    "number": 2505
                },
                {
                    "label": "France",
                    "number": 2300
                },
                {
                    "label": "Chile",
                    "number": 1986
                },
                {
                    "label": "Brazil",
                    "number": 1785
                },
                {
                    "label": "Colombia",
                    "number": 1732
                }
            ],
            "answer": "Canada",
            "answerValue": 7762,
            "question": "Which country, besides the United States, was mentioned with Mexico the most last year?",
            "rowIndex": 26,
            "approved": true,
            "params": {
                "country": "Mexico",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Mexico' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Mexico' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761317762
        },
        {
            "top10": [
                {
                    "label": "Haiti",
                    "number": 5.0675675675675675
                },
                {
                    "label": "Macao",
                    "number": 4.459308807134894
                },
                {
                    "label": "Nepal",
                    "number": 3.646651996227601
                },
                {
                    "label": "Saint Vincent and the Grenadines",
                    "number": 3.5655512890839276
                },
                {
                    "label": "Malawi",
                    "number": 2.5917199596095593
                },
                {
                    "label": "Papua New Guinea",
                    "number": 2.332814930015552
                },
                {
                    "label": "Kiribati",
                    "number": 2.0796197266785503
                },
                {
                    "label": "Tanzania",
                    "number": 2.065867062457379
                },
                {
                    "label": "Nicaragua",
                    "number": 2.061105722599418
                },
                {
                    "label": "United States",
                    "number": 1.877092553721561
                }
            ],
            "answer": "Haiti",
            "answerValue": 5.0675675675675675,
            "question": "Which country appealed the most for economic aid last year?",
            "rowIndex": 9,
            "approved": true,
            "params": {
                "codes": "('0231')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0231') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0231') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "Pakistan",
                    "number": 24881
                },
                {
                    "label": "United States",
                    "number": 10570
                },
                {
                    "label": "China",
                    "number": 7851
                },
                {
                    "label": "Bangladesh",
                    "number": 6869
                },
                {
                    "label": "United Kingdom",
                    "number": 6552
                },
                {
                    "label": "Nepal",
                    "number": 4762
                },
                {
                    "label": "Sri Lanka",
                    "number": 3572
                },
                {
                    "label": "Japan",
                    "number": 3018
                },
                {
                    "label": "France",
                    "number": 2876
                },
                {
                    "label": "Senegal",
                    "number": 2366
                }
            ],
            "answer": "Pakistan",
            "answerValue": 24881,
            "question": "Which country was mentioned the most in the news with India last year?",
            "rowIndex": 34,
            "approved": true,
            "params": {
                "country": "India",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'India' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'India' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761318140
        },
        {
            "top10": [
                {
                    "label": "VimL",
                    "number": 1.3683470025050617
                },
                {
                    "label": "Emacs Lisp",
                    "number": 1.36659288644956
                },
                {
                    "label": "ActionScript",
                    "number": 1.1540633333470722
                },
                {
                    "label": "Haskell",
                    "number": 0.822435923228584
                },
                {
                    "label": "Lua",
                    "number": 0.7791170117712977
                },
                {
                    "label": "Rust",
                    "number": 0.7431195095411237
                },
                {
                    "label": "Prolog",
                    "number": 0.6849445385186171
                },
                {
                    "label": "Julia",
                    "number": 0.665513110608279
                },
                {
                    "label": "C",
                    "number": 0.643897128621242
                },
                {
                    "label": "Assembly",
                    "number": 0.6436404302736276
                }
            ],
            "answer": "VimL",
            "answerValue": 1.3683470025050617,
            "question": "Which programming language has the angriest developers?",
            "rowIndex": 41,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(a+rgh|angry|annoyed|annoying|appalled|bitter|cranky|hate|hating|mad)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(a+rgh|angry|annoyed|annoying|appalled|bitter|cranky|hate|hating|mad)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(a+rgh|angry|annoyed|annoying|appalled|bitter|cranky|hate|hating|mad)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "VHDL",
                    "number": 7.548594074353652
                },
                {
                    "label": "Delphi",
                    "number": 7.1778920923555445
                },
                {
                    "label": "Objective-C",
                    "number": 6.425100073042776
                },
                {
                    "label": "Rust",
                    "number": 5.467236391623982
                },
                {
                    "label": "Logos",
                    "number": 5.1616455325957915
                },
                {
                    "label": "Processing",
                    "number": 4.68835813698043
                },
                {
                    "label": "Assembly",
                    "number": 4.6663931194838
                },
                {
                    "label": "OCaml",
                    "number": 4.4482113982411535
                },
                {
                    "label": "Puppet",
                    "number": 4.367725008033494
                },
                {
                    "label": "Lua",
                    "number": 4.326585958985291
                }
            ],
            "answer": "VHDL",
            "answerValue": 7.548594074353652,
            "question": "Which programming language has the most :( in its commit messages?",
            "rowIndex": 39,
            "approved": true,
            "params": {
                "regex": ":\\(",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r':\\(') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r':\\(') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Lua",
                    "number": 9.13390369119117
                },
                {
                    "label": "Visual Basic",
                    "number": 8.516327539788648
                },
                {
                    "label": "Logos",
                    "number": 7.398358596720635
                },
                {
                    "label": "ASP",
                    "number": 6.04182502095149
                },
                {
                    "label": "VHDL",
                    "number": 6.038875259482921
                },
                {
                    "label": "C#",
                    "number": 5.537934098584227
                },
                {
                    "label": "Racket",
                    "number": 5.523075679607727
                },
                {
                    "label": "ActionScript",
                    "number": 5.523017381018131
                },
                {
                    "label": "Assembly",
                    "number": 5.390488603541631
                },
                {
                    "label": "Processing",
                    "number": 5.224170495492478
                }
            ],
            "answer": "Lua",
            "answerValue": 9.13390369119117,
            "question": "Which programming language has the funniest developers?",
            "rowIndex": 43,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(ha(ha)+|he(he)+|lol|rofl|lmfao|lulz|lolz|rotfl|lawl|hilarious)\\b",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(ha(ha)+|he(he)+|lol|rofl|lmfao|lulz|lolz|rotfl|lawl|hilarious)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(ha(ha)+|he(he)+|lol|rofl|lmfao|lulz|lolz|rotfl|lawl|hilarious)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Assembly",
                    "number": 2.2929690328497982
                },
                {
                    "label": "Dart",
                    "number": 1.6831159675713783
                },
                {
                    "label": "Rust",
                    "number": 1.2526871732264657
                },
                {
                    "label": "Lua",
                    "number": 1.1852524753542082
                },
                {
                    "label": "Common Lisp",
                    "number": 1.0897903411043768
                },
                {
                    "label": "Visual Basic",
                    "number": 1.0805662899946888
                },
                {
                    "label": "Objective-C",
                    "number": 1.058565208993364
                },
                {
                    "label": "Processing",
                    "number": 1.0180434811728933
                },
                {
                    "label": "PHP",
                    "number": 0.9719433189762221
                },
                {
                    "label": "D",
                    "number": 0.9405237160836322
                }
            ],
            "answer": "Assembly",
            "answerValue": 2.2929690328497982,
            "question": "Which programming language has the happiest developers?",
            "rowIndex": 46,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(yes|yay|hallelujah|hurray|bingo|amused|cheerful|excited|glad|proud)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(yes|yay|hallelujah|hurray|bingo|amused|cheerful|excited|glad|proud)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(yes|yay|hallelujah|hurray|bingo|amused|cheerful|excited|glad|proud)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 24.303192759892777
                },
                {
                    "label": "Julia",
                    "number": 15.279071831048405
                },
                {
                    "label": "TypeScript",
                    "number": 12.84320523249783
                },
                {
                    "label": "Elixir",
                    "number": 11.44698208761109
                },
                {
                    "label": "Scala",
                    "number": 10.275948107578465
                },
                {
                    "label": "D",
                    "number": 10.079166384735098
                },
                {
                    "label": "ColdFusion",
                    "number": 9.726420798065297
                },
                {
                    "label": "OCaml",
                    "number": 9.609939949146124
                },
                {
                    "label": "XSLT",
                    "number": 8.625112024475417
                },
                {
                    "label": "Haxe",
                    "number": 8.485998885483422
                }
            ],
            "answer": "Rust",
            "answerValue": 24.303192759892777,
            "question": "Which programming language has the most issues per commit?",
            "rowIndex": 48,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(#)\\d+') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE",
            "inputSQL": "SELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(#)\\d+') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\nAND\n  repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE",
            "databases": "GitHub",
            "units": "Issues per Commit",
            "hasPassingInputQuery": false,
            "rowsSearched": 290265729
        },
        {
            "top10": [
                {
                    "label": "Scheme",
                    "number": 1.2625526872948352
                },
                {
                    "label": "Prolog",
                    "number": 0.9513118590536349
                },
                {
                    "label": "Racket",
                    "number": 0.9429641404208314
                },
                {
                    "label": "Rust",
                    "number": 0.7961994745083468
                },
                {
                    "label": "Haskell",
                    "number": 0.7886371866575463
                },
                {
                    "label": "Common Lisp",
                    "number": 0.6706402099103858
                },
                {
                    "label": "OCaml",
                    "number": 0.6612206132520633
                },
                {
                    "label": "Emacs Lisp",
                    "number": 0.6003529443362229
                },
                {
                    "label": "Tcl",
                    "number": 0.5826374053214216
                },
                {
                    "label": "Arduino",
                    "number": 0.5362289697700918
                }
            ],
            "answer": "Scheme",
            "answerValue": 1.2625526872948352,
            "question": "Developers of which programming language are the most surprised?\n",
            "rowIndex": 47,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(yikes|gosh|baffled|stumped|surprised|shocked)\\b",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(yikes|gosh|baffled|stumped|surprised|shocked)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(yikes|gosh|baffled|stumped|surprised|shocked)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Java",
                    "number": 7.855307488416427
                },
                {
                    "label": "C",
                    "number": 5.791108550275308
                },
                {
                    "label": "Logos",
                    "number": 5.471344264551539
                },
                {
                    "label": "Haxe",
                    "number": 4.667038172192812
                },
                {
                    "label": "Rust",
                    "number": 4.081849305979458
                },
                {
                    "label": "Assembly",
                    "number": 3.7894330332359827
                },
                {
                    "label": "Delphi",
                    "number": 3.748454759341229
                },
                {
                    "label": "C++",
                    "number": 3.703491279020774
                },
                {
                    "label": "Objective-C",
                    "number": 3.0056325082533895
                },
                {
                    "label": "Groovy",
                    "number": 2.950961867992224
                }
            ],
            "answer": "Java",
            "answerValue": 7.855307488416427,
            "question": "Which programming language mentions Android the most?",
            "rowIndex": 51,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(android)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(android)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(android)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Pascal",
                    "number": 1.9103760711751543
                },
                {
                    "label": "Visual Basic",
                    "number": 1.7032655079577297
                },
                {
                    "label": "Logos",
                    "number": 1.6861375406479586
                },
                {
                    "label": "Delphi",
                    "number": 1.5352713641982694
                },
                {
                    "label": "Lua",
                    "number": 1.5300531954572505
                },
                {
                    "label": "Arduino",
                    "number": 1.501441115356257
                },
                {
                    "label": "Haxe",
                    "number": 1.4453886876567288
                },
                {
                    "label": "C#",
                    "number": 1.4402828606339584
                },
                {
                    "label": "F#",
                    "number": 1.3252018228286297
                },
                {
                    "label": "Swift",
                    "number": 1.3092387465761683
                }
            ],
            "answer": "Pascal",
            "answerValue": 1.9103760711751543,
            "question": "Which programming language has the most :) in its commit messages?",
            "rowIndex": 40,
            "approved": true,
            "params": {
                "regex": ":\\)",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r':\\)') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r':\\)') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 100.45897184107858
                },
                {
                    "label": "Delphi",
                    "number": 94.13893208916537
                },
                {
                    "label": "C",
                    "number": 90.85214012811262
                },
                {
                    "label": "C++",
                    "number": 77.05645593378424
                },
                {
                    "label": "Pascal",
                    "number": 74.0109710168659
                },
                {
                    "label": "Tcl",
                    "number": 72.36882889881531
                },
                {
                    "label": "Erlang",
                    "number": 68.4854651895884
                },
                {
                    "label": "Scala",
                    "number": 68.12409915012014
                },
                {
                    "label": "OCaml",
                    "number": 65.44993057183561
                },
                {
                    "label": "TypeScript",
                    "number": 64.09447868838139
                }
            ],
            "answer": "Rust",
            "answerValue": 100.45897184107858,
            "question": "Which programming language has the chattiest developers?",
            "rowIndex": 49,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  SUM(LENGTH(payload_commit_msg)) / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE",
            "inputSQL": "SELECT\n  repository_language,\n  SUM(LENGTH(payload_commit_msg)) / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\nAND\n  repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE",
            "databases": "GitHub",
            "units": "Characters per Commit",
            "hasPassingInputQuery": false,
            "rowsSearched": 290265729
        },
        {
            "top10": [
                {
                    "label": "D",
                    "number": 1.6780567020772719
                },
                {
                    "label": "Common Lisp",
                    "number": 0.2682560839641543
                },
                {
                    "label": "Logos",
                    "number": 0.15484936597787374
                },
                {
                    "label": "Emacs Lisp",
                    "number": 0.15324798842266743
                },
                {
                    "label": "Prolog",
                    "number": 0.13318366026750889
                },
                {
                    "label": "ASP",
                    "number": 0.11693854879260948
                },
                {
                    "label": "Scheme",
                    "number": 0.09711943748421809
                },
                {
                    "label": "Racket",
                    "number": 0.09429641404208314
                },
                {
                    "label": "Visual Basic",
                    "number": 0.07325873152506364
                },
                {
                    "label": "Processing",
                    "number": 0.06697654481400614
                }
            ],
            "answer": "D",
            "answerValue": 1.6780567020772719,
            "question": "Which programming language has the most ! in its commit messages?",
            "rowIndex": 56,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(!)+\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(!)+\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(!)+\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "TypeScript",
                    "number": 1.146519766546737
                },
                {
                    "label": "XSLT",
                    "number": 1.1331211306488664
                },
                {
                    "label": "Lua",
                    "number": 0.8785787579548676
                },
                {
                    "label": "PowerShell",
                    "number": 0.7655575651441641
                },
                {
                    "label": "ASP",
                    "number": 0.6821415346235553
                },
                {
                    "label": "Delphi",
                    "number": 0.5981576743629621
                },
                {
                    "label": "Processing",
                    "number": 0.5358123585120491
                },
                {
                    "label": "Emacs Lisp",
                    "number": 0.5213591358709304
                },
                {
                    "label": "Scheme",
                    "number": 0.4855971874210905
                },
                {
                    "label": "Visual Basic",
                    "number": 0.4578670720316478
                }
            ],
            "answer": "TypeScript",
            "answerValue": 1.146519766546737,
            "question": "Developers of which programming language say 'newbie' or 'noob' the most?",
            "rowIndex": 44,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(newbie|noob|newb|n00b)\\b",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(newbie|noob|newb|n00b)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(newbie|noob|newb|n00b)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Colorado",
                    "number": 2.4945770065075923
                },
                {
                    "label": "Mississippi",
                    "number": 1.5845070422535212
                },
                {
                    "label": "Wyoming",
                    "number": 1.4267185473411155
                },
                {
                    "label": "Vermont",
                    "number": 1.4154281670205238
                },
                {
                    "label": "Montana",
                    "number": 1.3539651837524178
                },
                {
                    "label": "Utah",
                    "number": 1.0476689366160294
                },
                {
                    "label": "Kansas",
                    "number": 1.0200364298724955
                },
                {
                    "label": "New Mexico",
                    "number": 1.0178117048346056
                },
                {
                    "label": "Pennsylvania",
                    "number": 0.9975062344139651
                },
                {
                    "label": "Alaska",
                    "number": 0.9405388171528775
                }
            ],
            "answer": "Colorado",
            "answerValue": 2.4945770065075923,
            "question": "Which state's subreddit talked about beer the most in the past year?\n",
            "rowIndex": 61,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(beer|brewsky|brewery)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(beer|brewsky|brewery)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(beer|brewsky|brewery)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Alaska",
                    "number": 3.6665072533078273
                },
                {
                    "label": "Tennessee",
                    "number": 3.250975292587776
                },
                {
                    "label": "Hawaii",
                    "number": 2.8293545534924847
                },
                {
                    "label": "New Hampshire",
                    "number": 2.4026910139356077
                },
                {
                    "label": "Oklahoma",
                    "number": 2.159827213822894
                },
                {
                    "label": "South Carolina",
                    "number": 2.1590500179920835
                },
                {
                    "label": "Rhode Island",
                    "number": 2.1220159151193636
                },
                {
                    "label": "Arizona",
                    "number": 1.937046004842615
                },
                {
                    "label": "Minnesota",
                    "number": 1.8233756761684798
                },
                {
                    "label": "North Carolina",
                    "number": 1.7866526537046767
                }
            ],
            "answer": "Alaska",
            "answerValue": 3.6665072533078273,
            "question": "Which state's subreddit talked about cats the most in the past month?",
            "rowIndex": 62,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(cat|kitten|kitty|feline)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(cat|kitten|kitty|feline)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(cat|kitten|kitty|feline)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "JavaScript",
                    "number": 614417
                },
                {
                    "label": "Java",
                    "number": 420235
                },
                {
                    "label": "Ruby",
                    "number": 347799
                },
                {
                    "label": "PHP",
                    "number": 283669
                },
                {
                    "label": "Python",
                    "number": 255277
                },
                {
                    "label": "CSS",
                    "number": 234308
                },
                {
                    "label": "C++",
                    "number": 138008
                },
                {
                    "label": "C",
                    "number": 123359
                },
                {
                    "label": "C#",
                    "number": 114652
                },
                {
                    "label": "Objective-C",
                    "number": 100419
                }
            ],
            "answer": "JavaScript",
            "answerValue": 614417,
            "question": "Which programming language created the most new projects last year?",
            "rowIndex": 55,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  COUNT(UNIQUE(repository_name)) total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'CreateEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nORDER BY\n  total DESC",
            "inputSQL": "SELECT\n  repository_language,\n  COUNT(UNIQUE(repository_name)) total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'CreateEvent'\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nORDER BY\n  total DESC IGNORE CASE",
            "databases": "GitHub",
            "units": "Projects",
            "hasPassingInputQuery": false,
            "rowsSearched": 301619229
        },
        {
            "top10": [
                {
                    "label": "Nebraska",
                    "number": 2.2900763358778624
                },
                {
                    "label": "Pennsylvania",
                    "number": 1.9593872461702886
                },
                {
                    "label": "New York",
                    "number": 1.7699115044247788
                },
                {
                    "label": "Alabama",
                    "number": 1.6734279918864097
                },
                {
                    "label": "Kentucky",
                    "number": 1.407954945441746
                },
                {
                    "label": "Illinois",
                    "number": 1.1778563015312131
                },
                {
                    "label": "Iowa",
                    "number": 1.1219147344801794
                },
                {
                    "label": "Kansas",
                    "number": 1.092896174863388
                },
                {
                    "label": "Wisconsin",
                    "number": 0.8661614058465895
                },
                {
                    "label": "West Virginia",
                    "number": 0.6961506961506961
                }
            ],
            "answer": "Nebraska",
            "answerValue": 2.2900763358778624,
            "question": "Which state's subreddit mentioned Obama the most in the past year?",
            "rowIndex": 63,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(obama|barack)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(obama|barack)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(obama|barack)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "North Dakota",
                    "number": 1.6331658291457287
                },
                {
                    "label": "New York",
                    "number": 0.688298918387414
                },
                {
                    "label": "Michigan",
                    "number": 0.5782290055805822
                },
                {
                    "label": "Connecticut",
                    "number": 0.5459582790091264
                },
                {
                    "label": "Delaware",
                    "number": 0.46938775510204084
                },
                {
                    "label": "New Jersey",
                    "number": 0.4171779141104294
                },
                {
                    "label": "Indiana",
                    "number": 0.39970022483137646
                },
                {
                    "label": "Montana",
                    "number": 0.38684719535783363
                },
                {
                    "label": "New Mexico",
                    "number": 0.3816793893129771
                },
                {
                    "label": "Iowa",
                    "number": 0.3739715781600598
                }
            ],
            "answer": "North Dakota",
            "answerValue": 1.6331658291457287,
            "question": "Which state's subreddit mentioned pizza the most in the past year?",
            "rowIndex": 64,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(pizza)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(pizza)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(pizza)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "JavaScript",
                    "number": 1104776
                },
                {
                    "label": "Java",
                    "number": 723486
                },
                {
                    "label": "Ruby",
                    "number": 505549
                },
                {
                    "label": "PHP",
                    "number": 501839
                },
                {
                    "label": "Python",
                    "number": 492549
                },
                {
                    "label": "CSS",
                    "number": 452809
                },
                {
                    "label": "C++",
                    "number": 259818
                },
                {
                    "label": "C",
                    "number": 237922
                },
                {
                    "label": "C#",
                    "number": 204747
                },
                {
                    "label": "Objective-C",
                    "number": 168481
                }
            ],
            "answer": "JavaScript",
            "answerValue": 1104776,
            "question": "What's the most popular programming language?",
            "rowIndex": 36,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  COUNT(*) total\nFROM (\n  SELECT\n    repository_language,\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    repository_language IS NOT NULL\n  GROUP BY\n    repository_language,\n    repository_name )\nGROUP BY\n  repository_language\nORDER BY\n  total DESC",
            "inputSQL": "SELECT\n  repository_language,\n  COUNT(*) total\nFROM (\n  SELECT\n    repository_language,\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    LOWER(repository_language) = lower('userInput')\n  GROUP BY\n    repository_language,\n    repository_name )\nGROUP BY\n  repository_language\nORDER BY\n  total DESC",
            "databases": "GitHub",
            "units": "Repositories",
            "hasPassingInputQuery": false,
            "rowsSearched": 659325409
        },
        {
            "top10": [
                {
                    "label": "Ohio",
                    "number": 3.7789427697684577
                },
                {
                    "label": "Iowa",
                    "number": 3.5901271503365746
                },
                {
                    "label": "South Carolina",
                    "number": 3.5624325296869377
                },
                {
                    "label": "Nevada",
                    "number": 3.559870550161812
                },
                {
                    "label": "New York",
                    "number": 2.4582104228121926
                },
                {
                    "label": "Florida",
                    "number": 2.45275432247688
                },
                {
                    "label": "Missouri",
                    "number": 2.2538552787663106
                },
                {
                    "label": "Minnesota",
                    "number": 1.8172977572479183
                },
                {
                    "label": "North Carolina",
                    "number": 1.7235943247503942
                },
                {
                    "label": "Pennsylvania",
                    "number": 1.7100106875667973
                }
            ],
            "answer": "Ohio",
            "answerValue": 3.7789427697684577,
            "question": "Which state's subreddit mentioned Donald Trump the most in the past year?",
            "rowIndex": 67,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(trump|the donald)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(trump|the donald)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(trump|the donald)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "VimL",
                    "number": 3.8681206586680914
                },
                {
                    "label": "Erlang",
                    "number": 2.9549533540648603
                },
                {
                    "label": "Emacs Lisp",
                    "number": 2.8302319653326538
                },
                {
                    "label": "Objective-C",
                    "number": 2.6759304886809594
                },
                {
                    "label": "Puppet",
                    "number": 2.6059727711901624
                },
                {
                    "label": "TypeScript",
                    "number": 2.3388429752066116
                },
                {
                    "label": "C",
                    "number": 2.2952892304846158
                },
                {
                    "label": "JavaScript",
                    "number": 2.0826057471087447
                },
                {
                    "label": "Rust",
                    "number": 1.999796458375738
                },
                {
                    "label": "Go",
                    "number": 1.9978226315674876
                }
            ],
            "answer": "VimL",
            "answerValue": 3.8681206586680914,
            "question": "Which programming language has the most forked projects per repo?",
            "rowIndex": 35,
            "approved": true,
            "sql": "SELECT\n  repos.repository_language,\n  forks.total / repos.total per\nFROM (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'ForkEvent'\n  GROUP BY\n    repository_language) forks\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = forks.repository_language\nORDER BY\n  per DESC IGNORE CASE",
            "inputSQL": "SELECT\n  repos.repository_language,\n  forks.total / repos.total per\nFROM (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'ForkEvent'\n  GROUP BY\n    repository_language) forks\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = forks.repository_language\nWHERE\n  repos.repository_language = 'userInput'\nORDER BY\n  per DESC IGNORE CASE",
            "databases": "GitHub",
            "units": "Forks per Repo",
            "hasPassingInputQuery": false,
            "rowsSearched": 950109737
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 4.166463166463166
                },
                {
                    "label": "TypeScript",
                    "number": 2.447021191523391
                },
                {
                    "label": "Emacs Lisp",
                    "number": 2.009770603228547
                },
                {
                    "label": "OCaml",
                    "number": 1.9814291481631006
                },
                {
                    "label": "Python",
                    "number": 1.7087741524193532
                },
                {
                    "label": "JavaScript",
                    "number": 1.7047546289926645
                },
                {
                    "label": "CoffeeScript",
                    "number": 1.7007732167435836
                },
                {
                    "label": "Dart",
                    "number": 1.6455081512313563
                },
                {
                    "label": "XSLT",
                    "number": 1.596614682388741
                },
                {
                    "label": "Scala",
                    "number": 1.5886149613797482
                }
            ],
            "answer": "Rust",
            "answerValue": 4.166463166463166,
            "question": "Which programming language has the most open issues per repo?",
            "rowIndex": 52,
            "approved": true,
            "sql": "SELECT\n  repos.repository_language,\n  (issues.total / repos.total) per\nFROM (\n  SELECT\n  repository_language,\n  COUNT(*) total\n  FROM \n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'IssuesEvent'\n  AND\n    repository_language IS NOT NULL\n  AND\n    payload_action = 'opened'\n  GROUP BY\n    repository_language) issues\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = issues.repository_language\nORDER BY\n  per DESC\nLIMIT 10",
            "inputSQL": "SELECT\n  repos.repository_language,\n  (issues.total / repos.total) per\nFROM (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'IssuesEvent'\n    AND repository_language IS NOT NULL\n    AND payload_action = 'opened'\n  GROUP BY\n    repository_language) issues\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = issues.repository_language\nWHERE\n  repos.repository_language = 'userInput'\nORDER BY\n  per DESC\nLIMIT\n  10 IGNORE CASE",
            "databases": "GitHub",
            "units": "Issues per Repo",
            "hasPassingInputQuery": false,
            "rowsSearched": 951221825
        },
        {
            "top10": [
                {
                    "label": "VimL",
                    "number": 67.93433705682371
                },
                {
                    "label": "Emacs Lisp",
                    "number": 53.77748513169074
                },
                {
                    "label": "Rust",
                    "number": 38.33842083842084
                },
                {
                    "label": "OCaml",
                    "number": 33.580742834073476
                },
                {
                    "label": "C++",
                    "number": 29.459579397886213
                },
                {
                    "label": "C",
                    "number": 28.616693706340733
                },
                {
                    "label": "Puppet",
                    "number": 28.149029595152367
                },
                {
                    "label": "Shell",
                    "number": 26.98446627805933
                },
                {
                    "label": "Python",
                    "number": 25.94098049128107
                },
                {
                    "label": "Erlang",
                    "number": 24.662372278987117
                }
            ],
            "answer": "VimL",
            "answerValue": 67.93433705682371,
            "question": "Which programming language has the most commits per repo?",
            "rowIndex": 53,
            "approved": true,
            "sql": "SELECT\n  repos.repository_language,\n  (commits.total / repos.total) per,\nFROM (\n  SELECT\n  repository_language,\n  COUNT(payload_commit_msg) total\n  FROM \n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'PushEvent'\n  AND\n    payload_commit_msg IS NOT NULL\n  AND\n    repository_language IS NOT NULL\n  GROUP BY\n    repository_language) commits\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = commits.repository_language\nORDER BY\n  per DESC\nLIMIT 10",
            "inputSQL": "SELECT\n  repos.repository_language,\n  (commits.total / repos.total) per,\nFROM (\n  SELECT\n  repository_language,\n  COUNT(payload_commit_msg) total\n  FROM \n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'PushEvent'\n  AND\n    payload_commit_msg IS NOT NULL\n  AND\n    repository_language IS NOT NULL\n  GROUP BY\n    repository_language) commits\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = commits.repository_language\nWHERE\n  lower(commits.repository_language) = lower('userInput')\nORDER BY\n  per DESC\nLIMIT 10",
            "databases": "GitHub",
            "units": "Commits per Repo",
            "hasPassingInputQuery": false,
            "rowsSearched": 924866961
        },
        {
            "top10": [
                {
                    "label": "Thailand",
                    "number": 274
                },
                {
                    "label": "Italy",
                    "number": 229
                },
                {
                    "label": "Canada",
                    "number": 196
                },
                {
                    "label": "Japan",
                    "number": 184
                },
                {
                    "label": "Mexico",
                    "number": 154
                },
                {
                    "label": "China",
                    "number": 149
                },
                {
                    "label": "India",
                    "number": 146
                },
                {
                    "label": "Vietnam",
                    "number": 145
                },
                {
                    "label": "Australia",
                    "number": 140
                },
                {
                    "label": "Iceland",
                    "number": 132
                }
            ],
            "answer": "Thailand",
            "answerValue": 274,
            "question": "Which country was discussed the most in /r/travel in the past month?",
            "rowIndex": 59,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "travel"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'travel') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'travel') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 63958245
        },
        {
            "top10": [
                {
                    "label": "Texas",
                    "number": 189
                },
                {
                    "label": "Florida",
                    "number": 181
                },
                {
                    "label": "California",
                    "number": 166
                },
                {
                    "label": "Washington",
                    "number": 69
                },
                {
                    "label": "New York",
                    "number": 63
                },
                {
                    "label": "Indiana",
                    "number": 51
                },
                {
                    "label": "Wisconsin",
                    "number": 44
                },
                {
                    "label": "Ohio",
                    "number": 43
                },
                {
                    "label": "Michigan",
                    "number": 42
                },
                {
                    "label": "Arizona",
                    "number": 40
                }
            ],
            "answer": "Texas",
            "answerValue": 189,
            "question": "Which state was mentioned in /r/WTF the most in the past month?",
            "rowIndex": 81,
            "approved": true,
            "params": {
                "freebase_tag": "states",
                "subreddit": "wtf"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.states] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'wtf') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.states]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'wtf') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 64205060
        },
        {
            "top10": [
                {
                    "label": "Washington",
                    "number": 442
                },
                {
                    "label": "New York",
                    "number": 327
                },
                {
                    "label": "Arizona",
                    "number": 318
                },
                {
                    "label": "Texas",
                    "number": 301
                },
                {
                    "label": "Tennessee",
                    "number": 283
                },
                {
                    "label": "Minnesota",
                    "number": 271
                },
                {
                    "label": "Montana",
                    "number": 267
                },
                {
                    "label": "Ohio",
                    "number": 247
                },
                {
                    "label": "Florida",
                    "number": 239
                },
                {
                    "label": "Kansas",
                    "number": 184
                }
            ],
            "answer": "Washington",
            "answerValue": 442,
            "question": "Which state was mentioned in /r/NFL the most in the past month?",
            "rowIndex": 80,
            "approved": true,
            "params": {
                "freebase_tag": "states",
                "subreddit": "nfl"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.states] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'nfl') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.states]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'nfl') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 64394251
        },
        {
            "top10": [
                {
                    "label": "Texas",
                    "number": 270
                },
                {
                    "label": "Florida",
                    "number": 222
                },
                {
                    "label": "California",
                    "number": 189
                },
                {
                    "label": "New York",
                    "number": 155
                },
                {
                    "label": "Michigan",
                    "number": 89
                },
                {
                    "label": "Washington",
                    "number": 88
                },
                {
                    "label": "Colorado",
                    "number": 80
                },
                {
                    "label": "Arizona",
                    "number": 80
                },
                {
                    "label": "Maine",
                    "number": 77
                },
                {
                    "label": "Alaska",
                    "number": 75
                }
            ],
            "answer": "Texas",
            "answerValue": 270,
            "question": "Which state was mentioned the most in /r/funny in the past month?",
            "rowIndex": 79,
            "approved": true,
            "params": {
                "freebase_tag": "states",
                "subreddit": "funny"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.states] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'funny') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.states]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'funny') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 64501389
        },
        {
            "top10": [
                {
                    "label": "Texas",
                    "number": 82
                },
                {
                    "label": "Florida",
                    "number": 16
                },
                {
                    "label": "California",
                    "number": 16
                },
                {
                    "label": "Michigan",
                    "number": 12
                },
                {
                    "label": "New York",
                    "number": 12
                },
                {
                    "label": "Ohio",
                    "number": 11
                },
                {
                    "label": "Minnesota",
                    "number": 10
                },
                {
                    "label": "Utah",
                    "number": 9
                },
                {
                    "label": "Alabama",
                    "number": 9
                },
                {
                    "label": "Colorado",
                    "number": 7
                }
            ],
            "answer": "Texas",
            "answerValue": 82,
            "question": "Which state was mentioned the most in /r/fitness in the past month?",
            "rowIndex": 82,
            "approved": true,
            "params": {
                "freebase_tag": "states",
                "subreddit": "fitness"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.states] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'fitness') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.states]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'fitness') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 64084541
        },
        {
            "top10": [
                {
                    "label": "Texas",
                    "number": 352
                },
                {
                    "label": "Florida",
                    "number": 351
                },
                {
                    "label": "California",
                    "number": 323
                },
                {
                    "label": "Washington",
                    "number": 298
                },
                {
                    "label": "New York",
                    "number": 292
                },
                {
                    "label": "Alaska",
                    "number": 174
                },
                {
                    "label": "Colorado",
                    "number": 134
                },
                {
                    "label": "Ohio",
                    "number": 116
                },
                {
                    "label": "Michigan",
                    "number": 102
                },
                {
                    "label": "Idaho",
                    "number": 102
                }
            ],
            "answer": "Texas",
            "answerValue": 352,
            "question": "Which state was most mentioned in /r/Pics in the past month?",
            "rowIndex": 91,
            "approved": true,
            "params": {
                "freebase_tag": "states",
                "subreddit": "pics"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.states] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'pics') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.states]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'pics') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 64524886
        },
        {
            "top10": [
                {
                    "label": "Canada",
                    "number": 64
                },
                {
                    "label": "Iceland",
                    "number": 44
                },
                {
                    "label": "New Zealand",
                    "number": 32
                },
                {
                    "label": "Scotland",
                    "number": 30
                },
                {
                    "label": "Norway",
                    "number": 25
                },
                {
                    "label": "Australia",
                    "number": 21
                },
                {
                    "label": "Mexico",
                    "number": 20
                },
                {
                    "label": "Israel",
                    "number": 14
                },
                {
                    "label": "England",
                    "number": 14
                },
                {
                    "label": "Japan",
                    "number": 12
                }
            ],
            "answer": "Canada",
            "answerValue": 64,
            "question": "Which country was mentioned the most in /r/EarthPorn in the past month?",
            "rowIndex": 102,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "earthporn"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'earthporn') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'earthporn') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 63943043
        },
        {
            "top10": [
                {
                    "label": "California",
                    "number": 97
                },
                {
                    "label": "New York",
                    "number": 80
                },
                {
                    "label": "Washington",
                    "number": 76
                },
                {
                    "label": "Texas",
                    "number": 60
                },
                {
                    "label": "Hawaii",
                    "number": 38
                },
                {
                    "label": "Florida",
                    "number": 31
                },
                {
                    "label": "Alaska",
                    "number": 30
                },
                {
                    "label": "Colorado",
                    "number": 28
                },
                {
                    "label": "Utah",
                    "number": 25
                },
                {
                    "label": "Arizona",
                    "number": 21
                }
            ],
            "answer": "California",
            "answerValue": 97,
            "question": "Which state was mentioned the most in /r/travel in the past month?",
            "rowIndex": 100,
            "approved": true,
            "params": {
                "freebase_tag": "states",
                "subreddit": "travel",
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.states]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'travel') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.states]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'travel') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 6590606720
        },
        {
            "top10": [
                {
                    "label": "London",
                    "number": 17
                },
                {
                    "label": "Chicago",
                    "number": 10
                },
                {
                    "label": "Toronto",
                    "number": 8
                },
                {
                    "label": "Boston",
                    "number": 7
                },
                {
                    "label": "Miami",
                    "number": 6
                },
                {
                    "label": "Vancouver",
                    "number": 6
                },
                {
                    "label": "Los Angeles",
                    "number": 6
                },
                {
                    "label": "Houston",
                    "number": 5
                },
                {
                    "label": "Seattle",
                    "number": 4
                },
                {
                    "label": "Atlanta",
                    "number": 4
                }
            ],
            "answer": "London",
            "answerValue": 17,
            "question": "Which city was most mentioned in /r/fitness in the past month?",
            "rowIndex": 89,
            "approved": true,
            "params": {
                "freebase_tag": "cities",
                "subreddit": "fitness",
                "top_wiki": 50
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    50 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'fitness') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    50 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'fitness') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 6957194663
        },
        {
            "top10": [
                {
                    "label": "Batman",
                    "number": 14222
                },
                {
                    "label": "Superman",
                    "number": 9503
                },
                {
                    "label": "Deadpool",
                    "number": 1915
                },
                {
                    "label": "Flash",
                    "number": 1802
                },
                {
                    "label": "Wonder Woman",
                    "number": 1665
                },
                {
                    "label": "Doomsday",
                    "number": 1611
                },
                {
                    "label": "Iron Man",
                    "number": 1396
                },
                {
                    "label": "Spider-Man",
                    "number": 1379
                },
                {
                    "label": "Vision",
                    "number": 898
                },
                {
                    "label": "Thor",
                    "number": 855
                }
            ],
            "answer": "Batman",
            "answerValue": 14222,
            "question": "Which superhero was mentioned the most in /r/movies in the past month?",
            "rowIndex": 60,
            "approved": true,
            "params": {
                "freebase_tag": "superheroes",
                "subreddit": "movies",
                "top_wiki": 100
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.superheroes]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    100 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'movies') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.superheroes]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    100 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'movies') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 6620130011
        },
        {
            "top10": [
                {
                    "label": "Ronaldo",
                    "number": 56
                },
                {
                    "label": "Michael Jordan",
                    "number": 23
                },
                {
                    "label": "Peyton Manning",
                    "number": 15
                },
                {
                    "label": "Lance Armstrong",
                    "number": 13
                },
                {
                    "label": "LeBron James",
                    "number": 12
                },
                {
                    "label": "Usain Bolt",
                    "number": 10
                },
                {
                    "label": "Tom Brady",
                    "number": 10
                },
                {
                    "label": "Mike Tyson",
                    "number": 10
                },
                {
                    "label": "Yao Ming",
                    "number": 9
                },
                {
                    "label": "Ronaldinho",
                    "number": 8
                }
            ],
            "answer": "Ronaldo",
            "answerValue": 56,
            "question": "Who was the most popular athlete in /r/sports in the past month?",
            "rowIndex": 77,
            "approved": true,
            "params": {
                "freebase_tag": "athletes",
                "subreddit": "sports",
                "num_common_words": 500,
                "substring": true,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.athletes]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'sports') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.athletes]\n      WHERE\n        name = 'userInput'\n      OR name CONTAINS CONCAT(' ', 'userInput')\n      OR name CONTAINS CONCAT('userInput', ' ')\n) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'sports') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 8630035712
        },
        {
            "top10": [
                {
                    "label": "The Beatles",
                    "number": 412
                },
                {
                    "label": "Metallica",
                    "number": 398
                },
                {
                    "label": "Radiohead",
                    "number": 224
                },
                {
                    "label": "Yes",
                    "number": 212
                },
                {
                    "label": "Kiss",
                    "number": 172
                },
                {
                    "label": "Tool",
                    "number": 168
                },
                {
                    "label": "Foo Fighters",
                    "number": 145
                },
                {
                    "label": "Muse",
                    "number": 112
                },
                {
                    "label": "Eminem",
                    "number": 109
                },
                {
                    "label": "Queen",
                    "number": 105
                }
            ],
            "answer": "The Beatles",
            "answerValue": 412,
            "question": "What musical group was talked about in /r/music the most in the past month?",
            "rowIndex": 75,
            "approved": true,
            "params": {
                "freebase_tag": "musicians",
                "subreddit": "music",
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.musicians]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'music') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.musicians]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'music') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 7124234128
        },
        {
            "top10": [
                {
                    "label": "San Francisco",
                    "number": 1391
                },
                {
                    "label": "New York City",
                    "number": 957
                },
                {
                    "label": "Flint",
                    "number": 558
                },
                {
                    "label": "Detroit",
                    "number": 419
                },
                {
                    "label": "Atlanta",
                    "number": 224
                },
                {
                    "label": "Washington, D.C.",
                    "number": 196
                },
                {
                    "label": "Los Angeles",
                    "number": 145
                },
                {
                    "label": "Bury",
                    "number": 133
                },
                {
                    "label": "Jackson",
                    "number": 130
                },
                {
                    "label": "Seattle",
                    "number": 129
                }
            ],
            "answer": "San Francisco",
            "answerValue": 1391,
            "question": "Which city was mentioned the most in /r/news in the past month?",
            "rowIndex": 99,
            "approved": true,
            "params": {
                "freebase_tag": "cities",
                "subreddit": "news",
                "top_wiki": 75,
                "num_common_words": 2000
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    topic_wiki.title AS title,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name AS name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name,\n    title\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nJOIN (\n  SELECT\n    sub,\n    obj AS alias\n  FROM\n    [fh-bigquery:freebase20140119.triples_lang_en]\n  WHERE\n    (pred = '/common/topic/alias'\n      OR pred = '/type/object/name')\n    AND obj NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      2000)) aliases\nON\n  aliases.sub = pop_topic.mid\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', aliases.alias, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    topic_wiki.title AS title,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name AS name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name,\n    title\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nJOIN (\n  SELECT\n    sub,\n    obj AS alias,\n    CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n    SUM(input) OVER (PARTITION BY sub) AS input_alias\n  FROM\n    [fh-bigquery:freebase20140119.triples_lang_en]\n  WHERE\n    (pred = '/common/topic/alias'\n      OR pred = '/type/object/name')\n    AND obj NOT IN (\n    SELECT\n      word\n    FROM\n      [words.top10000]\n    LIMIT\n      2000)) aliases\nON\n  aliases.sub = pop_topic.mid\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  aliases.input_alias > 0\n  AND comments.body CONTAINS CONCAT(' ', aliases.alias, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 7096223336
        },
        {
            "top10": [
                {
                    "label": "Germany",
                    "number": 600
                },
                {
                    "label": "France",
                    "number": 343
                },
                {
                    "label": "Russia",
                    "number": 282
                },
                {
                    "label": "China",
                    "number": 279
                },
                {
                    "label": "Japan",
                    "number": 245
                },
                {
                    "label": "England",
                    "number": 192
                },
                {
                    "label": "Spain",
                    "number": 137
                },
                {
                    "label": "Vietnam",
                    "number": 129
                },
                {
                    "label": "Italy",
                    "number": 121
                },
                {
                    "label": "Roman Empire",
                    "number": 105
                }
            ],
            "answer": "Germany",
            "answerValue": 600,
            "question": "Which country was mentioned the most in /r/history in the past month?",
            "rowIndex": 105,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "history"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'history') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'history') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 63965866
        },
        {
            "top10": [
                {
                    "label": "Chicago",
                    "number": 52
                },
                {
                    "label": "London",
                    "number": 44
                },
                {
                    "label": "Boston",
                    "number": 40
                },
                {
                    "label": "Houston",
                    "number": 36
                },
                {
                    "label": "Detroit",
                    "number": 36
                },
                {
                    "label": "Vancouver",
                    "number": 34
                },
                {
                    "label": "Cleveland",
                    "number": 33
                },
                {
                    "label": "Denver",
                    "number": 29
                },
                {
                    "label": "San Francisco",
                    "number": 26
                },
                {
                    "label": "Seattle",
                    "number": 26
                }
            ],
            "answer": "Chicago",
            "answerValue": 52,
            "question": "Which city was mentioned the most in /r/WTF in the past month?",
            "rowIndex": 104,
            "approved": true,
            "params": {
                "freebase_tag": "cities",
                "subreddit": "wtf",
                "top_wiki": 100
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    100 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'wtf') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    100 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'wtf') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 6957317307
        },
        {
            "top10": [
                {
                    "label": "Atlanta",
                    "number": 19
                },
                {
                    "label": "Cleveland",
                    "number": 17
                },
                {
                    "label": "Seattle",
                    "number": 15
                },
                {
                    "label": "San Francisco",
                    "number": 15
                },
                {
                    "label": "Chicago",
                    "number": 13
                },
                {
                    "label": "London",
                    "number": 12
                },
                {
                    "label": "Boston",
                    "number": 8
                },
                {
                    "label": "Paris",
                    "number": 8
                },
                {
                    "label": "Miami",
                    "number": 6
                },
                {
                    "label": "Detroit",
                    "number": 6
                }
            ],
            "answer": "Atlanta",
            "answerValue": 19,
            "question": "Which U.S. city was mentioned the most in /r/UpliftingNews in the past month?",
            "rowIndex": 107,
            "approved": true,
            "params": {
                "freebase_tag": "cities",
                "subreddit": "upliftingnews",
                "top_wiki": 75
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    75 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'upliftingnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cities]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    75 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'upliftingnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 6957052420
        },
        {
            "top10": [
                {
                    "label": "California",
                    "number": 1114
                },
                {
                    "label": "Texas",
                    "number": 978
                },
                {
                    "label": "Florida",
                    "number": 777
                },
                {
                    "label": "New York",
                    "number": 589
                },
                {
                    "label": "Washington",
                    "number": 465
                },
                {
                    "label": "Alabama",
                    "number": 450
                },
                {
                    "label": "Georgia",
                    "number": 431
                },
                {
                    "label": "Michigan",
                    "number": 429
                },
                {
                    "label": "Colorado",
                    "number": 398
                },
                {
                    "label": "Indiana",
                    "number": 368
                }
            ],
            "answer": "California",
            "answerValue": 1114,
            "question": "Which state was mentioned the most in /r/news in the past month?",
            "rowIndex": 98,
            "approved": true,
            "params": {
                "freebase_tag": "states",
                "subreddit": "news",
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.states]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.states]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 6591143500
        },
        {
            "top10": [
                {
                    "label": "Canada",
                    "number": 34
                },
                {
                    "label": "Israel",
                    "number": 29
                },
                {
                    "label": "China",
                    "number": 23
                },
                {
                    "label": "Italy",
                    "number": 22
                },
                {
                    "label": "France",
                    "number": 17
                },
                {
                    "label": "Georgia",
                    "number": 17
                },
                {
                    "label": "India",
                    "number": 13
                },
                {
                    "label": "Iran",
                    "number": 12
                },
                {
                    "label": "Scotland",
                    "number": 11
                },
                {
                    "label": "England",
                    "number": 10
                }
            ],
            "answer": "Canada",
            "answerValue": 34,
            "question": "Which country was mentioned the most in /r/UpliftingNews in the past month?",
            "rowIndex": 108,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "upliftingnews",
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.countries]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'upliftingnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.countries]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'upliftingnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 6623428594
        },
        {
            "top10": [
                {
                    "label": "New England Patriots",
                    "number": 346736
                },
                {
                    "label": "Green Bay Packers",
                    "number": 296968
                },
                {
                    "label": "Washington Redskins",
                    "number": 226648
                },
                {
                    "label": "Oakland Raiders",
                    "number": 225124
                },
                {
                    "label": "Miami Dolphins",
                    "number": 163421
                },
                {
                    "label": "Denver Broncos",
                    "number": 160117
                },
                {
                    "label": "Dallas Cowboys",
                    "number": 156990
                },
                {
                    "label": "Pittsburgh Steelers",
                    "number": 147409
                },
                {
                    "label": "Seattle Seahawks",
                    "number": 139763
                },
                {
                    "label": "Cleveland Browns",
                    "number": 136763
                }
            ],
            "answer": "New England Patriots",
            "answerValue": 346736,
            "question": "Which football team had the most popular page in the past month?",
            "rowIndex": 115,
            "approved": true,
            "params": {
                "freebase_tag": "football_teams",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.football_teams]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.football_teams]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6528064605
        },
        {
            "top10": [
                {
                    "label": "Labrador Retriever",
                    "number": 587911
                },
                {
                    "label": "Golden Retriever",
                    "number": 342998
                },
                {
                    "label": "Jack Russell Terrier",
                    "number": 228979
                },
                {
                    "label": "Siberian Husky",
                    "number": 203361
                },
                {
                    "label": "Yorkshire Terrier",
                    "number": 182108
                },
                {
                    "label": "Pit bull",
                    "number": 170267
                },
                {
                    "label": "American Pit Bull Terrier",
                    "number": 151511
                },
                {
                    "label": "Akita",
                    "number": 150997
                },
                {
                    "label": "Shiba Inu",
                    "number": 150636
                },
                {
                    "label": "German Shepherd Dog",
                    "number": 144575
                }
            ],
            "answer": "Labrador Retriever",
            "answerValue": 587911,
            "question": "Which breed of dog had the most popular page in the past month?",
            "rowIndex": 117,
            "approved": true,
            "params": {
                "freebase_tag": "dog_breeds",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.dog_breeds]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.dog_breeds]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6532017182
        },
        {
            "top10": [
                {
                    "label": "California",
                    "number": 7146325
                },
                {
                    "label": "New York",
                    "number": 3078930
                },
                {
                    "label": "Minnesota",
                    "number": 1055276
                },
                {
                    "label": "New Jersey",
                    "number": 912767
                },
                {
                    "label": "Alaska",
                    "number": 817686
                },
                {
                    "label": "Texas",
                    "number": 761855
                },
                {
                    "label": "Florida",
                    "number": 625685
                },
                {
                    "label": "Hawaii",
                    "number": 591962
                },
                {
                    "label": "Maryland",
                    "number": 570807
                },
                {
                    "label": "Oregon",
                    "number": 543085
                }
            ],
            "answer": "California",
            "answerValue": 7146325,
            "question": "Which U.S. state had the most popular page in the past month?",
            "rowIndex": 120,
            "approved": true,
            "params": {
                "freebase_tag": "states"
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.states]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.states]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name = 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6526653520
        },
        {
            "top10": [
                {
                    "label": "Prince",
                    "number": 8632235
                },
                {
                    "label": "The Beatles",
                    "number": 2754422
                },
                {
                    "label": "Babymetal",
                    "number": 2023049
                },
                {
                    "label": "Pink Floyd",
                    "number": 1556494
                },
                {
                    "label": "The Rolling Stones",
                    "number": 1494279
                },
                {
                    "label": "Metallica",
                    "number": 1404290
                },
                {
                    "label": "Led Zeppelin",
                    "number": 1391540
                },
                {
                    "label": "One Direction",
                    "number": 1353414
                },
                {
                    "label": "Travis",
                    "number": 1281292
                },
                {
                    "label": "System of a Down",
                    "number": 1271962
                }
            ],
            "answer": "Prince",
            "answerValue": 8632235,
            "question": "What band had the most popular page in the past month?",
            "rowIndex": 118,
            "approved": true,
            "params": {
                "freebase_tag": "bands",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.bands]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.bands]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6817722440
        },
        {
            "top10": [
                {
                    "label": "New Hampshire",
                    "number": 1.0091302258529553
                },
                {
                    "label": "North Dakota",
                    "number": 0.628140703517588
                },
                {
                    "label": "Idaho",
                    "number": 0.6119951040391677
                },
                {
                    "label": "Rhode Island",
                    "number": 0.4244031830238727
                },
                {
                    "label": "Maine",
                    "number": 0.39718565592374033
                },
                {
                    "label": "Delaware",
                    "number": 0.3673469387755102
                },
                {
                    "label": "Mississippi",
                    "number": 0.352112676056338
                },
                {
                    "label": "Hawaii",
                    "number": 0.3006189213085765
                },
                {
                    "label": "Montana",
                    "number": 0.2901353965183752
                },
                {
                    "label": "Vermont",
                    "number": 0.25949516395376265
                }
            ],
            "answer": "New Hampshire",
            "answerValue": 1.0091302258529553,
            "question": "In the last year, which state's subreddit mentioned coffee the most?",
            "rowIndex": 152,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(coffee|latte|espresso)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(coffee|latte|espresso)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(coffee|latte|espresso)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Basketball",
                    "number": 656276
                },
                {
                    "label": "Football",
                    "number": 473742
                },
                {
                    "label": "Tennis",
                    "number": 463152
                },
                {
                    "label": "American football",
                    "number": 417491
                },
                {
                    "label": "Taekwondo",
                    "number": 399261
                },
                {
                    "label": "Judo",
                    "number": 391138
                },
                {
                    "label": "Baseball",
                    "number": 339914
                },
                {
                    "label": "Cricket",
                    "number": 312618
                },
                {
                    "label": "Muay Thai",
                    "number": 312433
                },
                {
                    "label": "Golf",
                    "number": 306362
                }
            ],
            "answer": "Basketball",
            "answerValue": 656276,
            "question": "Which sport had the most popular page in the past month?",
            "rowIndex": 121,
            "approved": true,
            "params": {
                "freebase_tag": "sports",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.sports]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.sports]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6533561768
        },
        {
            "top10": [
                {
                    "label": "Texas",
                    "number": 5.848295221942804
                },
                {
                    "label": "Nebraska",
                    "number": 0
                },
                {
                    "label": "Kansas",
                    "number": 0
                },
                {
                    "label": "Connecticut",
                    "number": 0
                },
                {
                    "label": "California",
                    "number": 0
                },
                {
                    "label": "Kentucky",
                    "number": 0
                },
                {
                    "label": "Delaware",
                    "number": 0
                },
                {
                    "label": "Arkansas",
                    "number": 0
                },
                {
                    "label": "Washington",
                    "number": 0
                },
                {
                    "label": "Indiana",
                    "number": 0
                }
            ],
            "answer": "Texas",
            "answerValue": 5.848295221942804,
            "question": "Which state's subreddit mentioned Velveeta the most in the past year?",
            "rowIndex": 159,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(velveeta)\\b",
                "per": 100000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(velveeta)\\b') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(velveeta)\\b') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 100,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Texas",
                    "number": 70
                },
                {
                    "label": "California",
                    "number": 61
                },
                {
                    "label": "New York",
                    "number": 47
                },
                {
                    "label": "Louisiana",
                    "number": 27
                },
                {
                    "label": "Florida",
                    "number": 20
                },
                {
                    "label": "Wisconsin",
                    "number": 19
                },
                {
                    "label": "Pennsylvania",
                    "number": 16
                },
                {
                    "label": "Washington",
                    "number": 14
                },
                {
                    "label": "Hawaii",
                    "number": 13
                },
                {
                    "label": "New Jersey",
                    "number": 11
                }
            ],
            "answer": "Texas",
            "answerValue": 70,
            "question": "Which state was mentioned the most in /r/food in the past month?",
            "rowIndex": 155,
            "approved": true,
            "params": {
                "freebase_tag": "states",
                "subreddit": "food"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.states] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'food') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.states]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'food') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 63982710
        },
        {
            "top10": [
                {
                    "label": "Purple Rain",
                    "number": 907098
                },
                {
                    "label": "Back to the Future",
                    "number": 447183
                },
                {
                    "label": "Blade Runner",
                    "number": 393854
                },
                {
                    "label": "Star Wars Episode VI: Return of the Jedi",
                    "number": 322107
                },
                {
                    "label": "Indiana Jones and the Raiders of the Lost Ark",
                    "number": 316814
                },
                {
                    "label": "Dead Poets Society",
                    "number": 272516
                },
                {
                    "label": "Full Metal Jacket",
                    "number": 253324
                },
                {
                    "label": "My Neighbor Totoro",
                    "number": 212217
                },
                {
                    "label": "Rain Man",
                    "number": 211617
                },
                {
                    "label": "The Terminator",
                    "number": 211437
                }
            ],
            "answer": "Purple Rain",
            "answerValue": 907098,
            "question": "Which '80s film had the most popular page in the past month?",
            "rowIndex": 126,
            "approved": true,
            "params": {
                "freebase_tag": "80s_movies",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.80s_movies]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.80s_movies]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6625096450
        },
        {
            "top10": [
                {
                    "label": "Seattle",
                    "number": 2.111801242236025
                },
                {
                    "label": "Los Angeles",
                    "number": 2.047327217353936
                },
                {
                    "label": "Atlanta",
                    "number": 1.824178134389152
                },
                {
                    "label": "Pittsburgh",
                    "number": 1.7944059394836598
                },
                {
                    "label": "Austin",
                    "number": 1.7139845078141636
                },
                {
                    "label": "Denver",
                    "number": 1.6448027238133387
                },
                {
                    "label": "Boston",
                    "number": 1.5753958798171697
                },
                {
                    "label": "San Diego",
                    "number": 1.509454290793514
                },
                {
                    "label": "Houston",
                    "number": 1.4879872537110945
                },
                {
                    "label": "San Francisco",
                    "number": 1.403764641538672
                }
            ],
            "answer": "Seattle",
            "answerValue": 2.111801242236025,
            "question": "Which city's subreddit discussed traffic the most?",
            "rowIndex": 153,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(traffic)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n cities.city,\n SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(traffic)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n SELECT\n   body,\n   subreddit\n FROM\n   TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n [subreddits.cities] cities\nON\n comments.subreddit = cities.subreddit\nGROUP BY\n cities.city\nORDER BY\n per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  cities.city,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(traffic)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    body,\n    subreddit\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n  [subreddits.cities] cities\nON\n  comments.subreddit = cities.subreddit\nJOIN\n  [fh-bigquery:freebase20140119.triples_lang_en] aliases\nON\n  aliases.sub = cities.mid\nWHERE\n  (aliases.pred = '/common/topic/alias'\n    OR aliases.pred = '/type/object/name')\n  AND aliases.obj = 'userInput'\nGROUP BY\n  cities.city\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 532396361
        },
        {
            "top10": [
                {
                    "label": "New York",
                    "number": 6.588003933136677
                },
                {
                    "label": "Nevada",
                    "number": 3.559870550161812
                },
                {
                    "label": "Mississippi",
                    "number": 2.992957746478873
                },
                {
                    "label": "South Carolina",
                    "number": 2.626844188557035
                },
                {
                    "label": "Missouri",
                    "number": 2.372479240806643
                },
                {
                    "label": "Iowa",
                    "number": 1.6454749439042633
                },
                {
                    "label": "Ohio",
                    "number": 1.6164263870685889
                },
                {
                    "label": "Tennessee",
                    "number": 1.4304291287386215
                },
                {
                    "label": "Pennsylvania",
                    "number": 1.3181332383327395
                },
                {
                    "label": "Nebraska",
                    "number": 1.2213740458015268
                }
            ],
            "answer": "New York",
            "answerValue": 6.588003933136677,
            "question": "Which state's subreddit mentioned Hillary Clinton the most in the past year?",
            "rowIndex": 167,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(hillary|clinton)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(hillary|clinton)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(hillary|clinton)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Idaho",
                    "number": 1.2239902080783354
                },
                {
                    "label": "Delaware",
                    "number": 0.8163265306122449
                },
                {
                    "label": "Connecticut",
                    "number": 0.7333767926988266
                },
                {
                    "label": "New Hampshire",
                    "number": 0.7208073041806824
                },
                {
                    "label": "Oklahoma",
                    "number": 0.7199424046076314
                },
                {
                    "label": "Tennessee",
                    "number": 0.6501950585175552
                },
                {
                    "label": "Colorado",
                    "number": 0.6197706848466068
                },
                {
                    "label": "Rhode Island",
                    "number": 0.5305039787798409
                },
                {
                    "label": "Alabama",
                    "number": 0.5070993914807302
                },
                {
                    "label": "Washington",
                    "number": 0.36114120621162876
                }
            ],
            "answer": "Idaho",
            "answerValue": 1.2239902080783354,
            "question": "Which state's subreddit mentioned rock climbing the most in the past year?",
            "rowIndex": 168,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(rock climbing|bouldering)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(rock climbing|bouldering)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(rock climbing|bouldering)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Germany",
                    "number": 3000
                },
                {
                    "label": "Russia",
                    "number": 2298
                },
                {
                    "label": "Turkey",
                    "number": 2219
                },
                {
                    "label": "France",
                    "number": 1671
                },
                {
                    "label": "Greece",
                    "number": 1416
                },
                {
                    "label": "Poland",
                    "number": 1097
                },
                {
                    "label": "Ukraine",
                    "number": 938
                },
                {
                    "label": "Sweden",
                    "number": 842
                },
                {
                    "label": "Belgium",
                    "number": 763
                },
                {
                    "label": "Syria",
                    "number": 736
                }
            ],
            "answer": "Germany",
            "answerValue": 3000,
            "question": "Which country was mentioned the most in /r/europe in the past month? ",
            "rowIndex": 69,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "europe"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'europe') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'europe') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 64087380
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 465
                },
                {
                    "label": "Canada",
                    "number": 217
                },
                {
                    "label": "Australia",
                    "number": 171
                },
                {
                    "label": "Russia",
                    "number": 166
                },
                {
                    "label": "Brazil",
                    "number": 152
                },
                {
                    "label": "India",
                    "number": 115
                },
                {
                    "label": "Japan",
                    "number": 94
                },
                {
                    "label": "Germany",
                    "number": 90
                },
                {
                    "label": "Mexico",
                    "number": 75
                },
                {
                    "label": "England",
                    "number": 73
                }
            ],
            "answer": "China",
            "answerValue": 465,
            "question": "Which country was mentioned the most in /r/WTF in the past month?",
            "rowIndex": 103,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "wtf"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'wtf') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'wtf') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 64206844
        },
        {
            "top10": [
                {
                    "label": "Montana",
                    "number": 2.9013539651837523
                },
                {
                    "label": "Hawaii",
                    "number": 1.7683465959328029
                },
                {
                    "label": "Wyoming",
                    "number": 1.297016861219196
                },
                {
                    "label": "Massachusetts",
                    "number": 1.0593220338983051
                },
                {
                    "label": "Utah",
                    "number": 1.0476689366160294
                },
                {
                    "label": "New Hampshire",
                    "number": 0.9610764055742431
                },
                {
                    "label": "Maine",
                    "number": 0.9078529278256923
                },
                {
                    "label": "Delaware",
                    "number": 0.8163265306122449
                },
                {
                    "label": "New Jersey",
                    "number": 0.6380368098159509
                },
                {
                    "label": "Alaska",
                    "number": 0.637653435357883
                }
            ],
            "answer": "Montana",
            "answerValue": 2.9013539651837523,
            "question": "Which state's subreddit talked about sushi the most in the past year?",
            "rowIndex": 170,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(sushi)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(sushi)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(sushi)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Maine",
                    "number": 3.2909668633681344
                },
                {
                    "label": "New Hampshire",
                    "number": 2.8832292167227296
                },
                {
                    "label": "Missouri",
                    "number": 2.372479240806643
                },
                {
                    "label": "Montana",
                    "number": 1.9342359767891684
                },
                {
                    "label": "Rhode Island",
                    "number": 1.5915119363395225
                },
                {
                    "label": "New Jersey",
                    "number": 1.3742331288343559
                },
                {
                    "label": "Indiana",
                    "number": 1.2490632025980515
                },
                {
                    "label": "Connecticut",
                    "number": 1.2222946544980444
                },
                {
                    "label": "North Carolina",
                    "number": 0.8407777193904361
                },
                {
                    "label": "Iowa",
                    "number": 0.7479431563201197
                }
            ],
            "answer": "Maine",
            "answerValue": 3.2909668633681344,
            "question": "Which state's subreddit discussed donuts the most in the past year?",
            "rowIndex": 172,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(donut|donuts|donut holes)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(donut|donuts|donut holes)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(donut|donuts|donut holes)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "New Mexico",
                    "number": 1.272264631043257
                },
                {
                    "label": "North Dakota",
                    "number": 1.256281407035176
                },
                {
                    "label": "Maine",
                    "number": 1.2482977757603269
                },
                {
                    "label": "Idaho",
                    "number": 1.2239902080783354
                },
                {
                    "label": "Arkansas",
                    "number": 0.8806693086745927
                },
                {
                    "label": "Mississippi",
                    "number": 0.8802816901408451
                },
                {
                    "label": "Illinois",
                    "number": 0.5889281507656066
                },
                {
                    "label": "Rhode Island",
                    "number": 0.5305039787798409
                },
                {
                    "label": "Utah",
                    "number": 0.5238344683080147
                },
                {
                    "label": "Alabama",
                    "number": 0.5070993914807302
                }
            ],
            "answer": "New Mexico",
            "answerValue": 1.272264631043257,
            "question": "Which state's subreddit mentioned knitting the most in the past year?",
            "rowIndex": 171,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(knitting|knit|crochet|yarn)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(knitting|knit|crochet|yarn)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(knitting|knit|crochet|yarn)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "New Mexico",
                    "number": 11.450381679389313
                },
                {
                    "label": "Nevada",
                    "number": 3.236245954692557
                },
                {
                    "label": "Nebraska",
                    "number": 1.5267175572519085
                },
                {
                    "label": "Idaho",
                    "number": 1.2239902080783354
                },
                {
                    "label": "Oregon",
                    "number": 1.2037644998905668
                },
                {
                    "label": "California",
                    "number": 1.202026272859964
                },
                {
                    "label": "Rhode Island",
                    "number": 1.0610079575596818
                },
                {
                    "label": "Florida",
                    "number": 1.0052271813429836
                },
                {
                    "label": "Montana",
                    "number": 0.9671179883945842
                },
                {
                    "label": "Mississippi",
                    "number": 0.8802816901408451
                }
            ],
            "answer": "New Mexico",
            "answerValue": 11.450381679389313,
            "question": "On which state's subreddit could you spot the most UFOs in the past year?",
            "rowIndex": 175,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(ufos?|aliens|alien)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(ufos?|aliens|alien)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(ufos?|aliens|alien)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Florida",
                    "number": 4.0209087253719344
                },
                {
                    "label": "Washington",
                    "number": 3.6114120621162873
                },
                {
                    "label": "New Hampshire",
                    "number": 2.4026910139356077
                },
                {
                    "label": "Michigan",
                    "number": 2.017077926443892
                },
                {
                    "label": "Massachusetts",
                    "number": 0
                },
                {
                    "label": "Hawaii",
                    "number": 0
                },
                {
                    "label": "Utah",
                    "number": 0
                },
                {
                    "label": "Connecticut",
                    "number": 0
                },
                {
                    "label": "Minnesota",
                    "number": 0
                },
                {
                    "label": "Oklahoma",
                    "number": 0
                }
            ],
            "answer": "Florida",
            "answerValue": 4.0209087253719344,
            "question": "Which state's subreddit mentioned insomnia the most in the past year?",
            "rowIndex": 177,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(insomniac?)\\b",
                "per": 10000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(insomniac?)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(insomniac?)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Hip hop music",
                    "number": 551095
                },
                {
                    "label": "Opera",
                    "number": 543398
                },
                {
                    "label": "UK Singles Chart",
                    "number": 536625
                },
                {
                    "label": "Rock and roll",
                    "number": 428840
                },
                {
                    "label": "Jazz",
                    "number": 426793
                },
                {
                    "label": "Rhythm and blues",
                    "number": 336249
                },
                {
                    "label": "K-pop",
                    "number": 328071
                },
                {
                    "label": "Heavy metal",
                    "number": 319817
                },
                {
                    "label": "Punk rock",
                    "number": 317666
                },
                {
                    "label": "Latin Language",
                    "number": 283498
                }
            ],
            "answer": "Hip hop music",
            "answerValue": 551095,
            "question": "What music genre had the most popular page in the past month?",
            "rowIndex": 131,
            "approved": true,
            "params": {
                "freebase_tag": "music_genres",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.music_genres]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.music_genres]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6554281758
        },
        {
            "top10": [
                {
                    "label": "Arkansas",
                    "number": 8.806693086745927
                },
                {
                    "label": "Mississippi",
                    "number": 8.80281690140845
                },
                {
                    "label": "California",
                    "number": 4.292950974499871
                },
                {
                    "label": "Connecticut",
                    "number": 2.444589308996089
                },
                {
                    "label": "Minnesota",
                    "number": 2.43116756822464
                },
                {
                    "label": "New Hampshire",
                    "number": 2.4026910139356077
                },
                {
                    "label": "Michigan",
                    "number": 2.017077926443892
                },
                {
                    "label": "New Jersey",
                    "number": 1.9631901840490797
                },
                {
                    "label": "Texas",
                    "number": 1.7544885665828411
                },
                {
                    "label": "Wisconsin",
                    "number": 1.6656950112434414
                }
            ],
            "answer": "Arkansas",
            "answerValue": 8.806693086745927,
            "question": "Which state's subreddit brought up calories the most in the past year?",
            "rowIndex": 181,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(calories)\\b",
                "per": 10000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(calories)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(calories)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "New York",
                    "number": 9.83284169124877
                },
                {
                    "label": "New Hampshire",
                    "number": 4.805382027871215
                },
                {
                    "label": "Kentucky",
                    "number": 3.5198873636043646
                },
                {
                    "label": "Connecticut",
                    "number": 3.259452411994785
                },
                {
                    "label": "Hawaii",
                    "number": 2.6525198938992043
                },
                {
                    "label": "Indiana",
                    "number": 2.498126405196103
                },
                {
                    "label": "Florida",
                    "number": 2.0104543626859672
                },
                {
                    "label": "New Jersey",
                    "number": 1.9631901840490797
                },
                {
                    "label": "Alaska",
                    "number": 1.5941335883947074
                },
                {
                    "label": "Michigan",
                    "number": 1.3447186176292611
                }
            ],
            "answer": "New York",
            "answerValue": 9.83284169124877,
            "question": "Which state's subreddit talked about Pizza Hut the most in the past year?",
            "rowIndex": 182,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(pizza hut)\\b",
                "per": 10000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(pizza hut)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(pizza hut)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Hawaii",
                    "number": 4.420866489832007
                },
                {
                    "label": "Wyoming",
                    "number": 2.594033722438392
                },
                {
                    "label": "Washington",
                    "number": 1.8057060310581436
                },
                {
                    "label": "Oregon",
                    "number": 1.4226307725979426
                },
                {
                    "label": "Alaska",
                    "number": 1.275306870715766
                },
                {
                    "label": "Idaho",
                    "number": 1.2239902080783354
                },
                {
                    "label": "Illinois",
                    "number": 1.1778563015312131
                },
                {
                    "label": "Delaware",
                    "number": 1.0204081632653061
                },
                {
                    "label": "Colorado",
                    "number": 0.9296560272699101
                },
                {
                    "label": "South Carolina",
                    "number": 0.7196833393306945
                }
            ],
            "answer": "Hawaii",
            "answerValue": 4.420866489832007,
            "question": "Which state's subreddit talked about Costco the most in the past year?",
            "rowIndex": 184,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(costco)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(costco)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(costco)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Harvard University",
                    "number": 701432
                },
                {
                    "label": "Massachusetts Institute of Technology",
                    "number": 599106
                },
                {
                    "label": "Stanford University",
                    "number": 511523
                },
                {
                    "label": "University of Oxford",
                    "number": 462001
                },
                {
                    "label": "Columbia University",
                    "number": 396558
                },
                {
                    "label": "Yale University",
                    "number": 393881
                },
                {
                    "label": "University of Cambridge",
                    "number": 392202
                },
                {
                    "label": "University of Chicago",
                    "number": 362628
                },
                {
                    "label": "Princeton University",
                    "number": 300843
                },
                {
                    "label": "Cornell University",
                    "number": 278783
                }
            ],
            "answer": "Harvard University",
            "answerValue": 701432,
            "question": "Which college or university had the most popular page in the past month?",
            "rowIndex": 128,
            "approved": true,
            "params": {
                "freebase_tag": "universities",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.universities]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.universities]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6679592095
        },
        {
            "top10": [
                {
                    "label": "Kansas",
                    "number": 5.46448087431694
                },
                {
                    "label": "Tennessee",
                    "number": 5.201560468140442
                },
                {
                    "label": "Missouri",
                    "number": 4.744958481613286
                },
                {
                    "label": "South Dakota",
                    "number": 4.405286343612334
                },
                {
                    "label": "New Mexico",
                    "number": 3.816793893129771
                },
                {
                    "label": "Massachusetts",
                    "number": 3.707627118644068
                },
                {
                    "label": "West Virginia",
                    "number": 3.276003276003276
                },
                {
                    "label": "Nevada",
                    "number": 3.236245954692557
                },
                {
                    "label": "Illinois",
                    "number": 2.944640753828033
                },
                {
                    "label": "Michigan",
                    "number": 2.1515497882068177
                }
            ],
            "answer": "Kansas",
            "answerValue": 5.46448087431694,
            "question": "Which state's subreddit mentioned unemployment the most in the past year?",
            "rowIndex": 185,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(unemployment|unemployed)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(unemployment|unemployed)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(unemployment|unemployed)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Washington",
                    "number": 1.408450704225352
                },
                {
                    "label": "California",
                    "number": 1.1590967631149651
                },
                {
                    "label": "Oregon",
                    "number": 0.7550886408404465
                },
                {
                    "label": "Missouri",
                    "number": 0.5931198102016607
                },
                {
                    "label": "Alaska",
                    "number": 0.5579467559381476
                },
                {
                    "label": "Louisiana",
                    "number": 0.517976843388178
                },
                {
                    "label": "North Carolina",
                    "number": 0.49395691014188126
                },
                {
                    "label": "Arizona",
                    "number": 0.48426150121065376
                },
                {
                    "label": "Hawaii",
                    "number": 0.45977011494252873
                },
                {
                    "label": "Ohio",
                    "number": 0.3931847968545216
                }
            ],
            "answer": "Washington",
            "answerValue": 1.408450704225352,
            "question": "What state's subreddit mentioned rain the most in the past year?",
            "rowIndex": 186,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(rain|rainy|raining)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(rain|rainy|raining)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(rain|rainy|raining)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Massachusetts",
                    "number": 1.4830508474576272
                },
                {
                    "label": "Iowa",
                    "number": 1.2964348042882075
                },
                {
                    "label": "Hawaii",
                    "number": 1.0079575596816976
                },
                {
                    "label": "Delaware",
                    "number": 0.7551020408163265
                },
                {
                    "label": "Arizona",
                    "number": 0.6779661016949152
                },
                {
                    "label": "South Dakota",
                    "number": 0.6607929515418502
                },
                {
                    "label": "Missouri",
                    "number": 0.5931198102016607
                },
                {
                    "label": "Wyoming",
                    "number": 0.5188067444876784
                },
                {
                    "label": "Idaho",
                    "number": 0.48959608323133413
                },
                {
                    "label": "Alaska",
                    "number": 0.430416068866571
                }
            ],
            "answer": "Massachusetts",
            "answerValue": 1.4830508474576272,
            "question": "Which state's subreddit mentioned bikes the most in the past year?",
            "rowIndex": 187,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(bike|bicycling|unicycle|bikes|fixie|single speed|bmx)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(bike|bicycling|unicycle|bikes|fixie|single speed|bmx)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(bike|bicycling|unicycle|bikes|fixie|single speed|bmx)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "New Jersey",
                    "number": 6.52760736196319
                },
                {
                    "label": "Florida",
                    "number": 4.0209087253719344
                },
                {
                    "label": "New York",
                    "number": 3.933136676499508
                },
                {
                    "label": "Connecticut",
                    "number": 3.911342894393742
                },
                {
                    "label": "Michigan",
                    "number": 3.2273246823102264
                },
                {
                    "label": "Alabama",
                    "number": 2.535496957403651
                },
                {
                    "label": "Maine",
                    "number": 2.4965955515206537
                },
                {
                    "label": "Hawaii",
                    "number": 2.2104332449160036
                },
                {
                    "label": "California",
                    "number": 1.7171803897999485
                },
                {
                    "label": "Massachusetts",
                    "number": 1.5889830508474576
                }
            ],
            "answer": "New Jersey",
            "answerValue": 6.52760736196319,
            "question": "Which state's subreddit mentioned Uber the most in the past year?",
            "rowIndex": 188,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(uber)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(uber)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(uber)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Kentucky",
                    "number": 7.743752199929602
                },
                {
                    "label": "Colorado",
                    "number": 3.8735667802912923
                },
                {
                    "label": "North Carolina",
                    "number": 3.3631108775617444
                },
                {
                    "label": "Nevada",
                    "number": 3.236245954692557
                },
                {
                    "label": "Kansas",
                    "number": 2.914389799635701
                },
                {
                    "label": "Virginia",
                    "number": 2.899951667472209
                },
                {
                    "label": "Massachusetts",
                    "number": 2.6483050847457625
                },
                {
                    "label": "Alabama",
                    "number": 2.535496957403651
                },
                {
                    "label": "South Carolina",
                    "number": 2.1590500179920835
                },
                {
                    "label": "Wisconsin",
                    "number": 2.0821187640543015
                }
            ],
            "answer": "Kentucky",
            "answerValue": 7.743752199929602,
            "question": "Which state's subreddit mentioned Obamacare the most in the past year?",
            "rowIndex": 189,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(ACA|obamacare|affordable care act)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(ACA|obamacare|affordable care act)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(ACA|obamacare|affordable care act)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Portland",
                    "number": 2.0131955819507867
                },
                {
                    "label": "Los Angeles",
                    "number": 1.6815829300648344
                },
                {
                    "label": "Melbourne",
                    "number": 1.223910899286532
                },
                {
                    "label": "Atlanta",
                    "number": 1.1387426529199989
                },
                {
                    "label": "Vancouver",
                    "number": 1.0702128687919024
                },
                {
                    "label": "Pittsburgh",
                    "number": 1.0093533409595585
                },
                {
                    "label": "San Francisco",
                    "number": 0.9874967716451696
                },
                {
                    "label": "Washington, D.C.",
                    "number": 0.9714531551410689
                },
                {
                    "label": "New York City",
                    "number": 0.8746610688358262
                },
                {
                    "label": "Philadelphia",
                    "number": 0.8006987916727326
                }
            ],
            "answer": "Portland",
            "answerValue": 2.0131955819507867,
            "question": "Which city's subreddit brought up kale the most in the past 6 months?",
            "rowIndex": 180,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(kale)\\b",
                "per": 10000
            },
            "sql": "\nSELECT\n cities.city,\n SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(kale)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n SELECT\n   body,\n   subreddit\n FROM\n   TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n [subreddits.cities] cities\nON\n comments.subreddit = cities.subreddit\nGROUP BY\n cities.city\nORDER BY\n per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  cities.city,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(kale)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    body,\n    subreddit\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n  [subreddits.cities] cities\nON\n  comments.subreddit = cities.subreddit\nJOIN\n  [fh-bigquery:freebase20140119.triples_lang_en] aliases\nON\n  aliases.sub = cities.mid\nWHERE\n  (aliases.pred = '/common/topic/alias'\n    OR aliases.pred = '/type/object/name')\n  AND aliases.obj = 'userInput'\nGROUP BY\n  cities.city\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 532396361
        },
        {
            "top10": [
                {
                    "label": "San Francisco",
                    "number": 7.641705786731082
                },
                {
                    "label": "Vancouver",
                    "number": 2.0920935435093315
                },
                {
                    "label": "Montreal",
                    "number": 1.5772210203084653
                },
                {
                    "label": "San Diego",
                    "number": 1.5730216021117276
                },
                {
                    "label": "New York City",
                    "number": 1.4869238170209045
                },
                {
                    "label": "Austin",
                    "number": 1.2531984486869343
                },
                {
                    "label": "Denver",
                    "number": 1.0848521263101676
                },
                {
                    "label": "Los Angeles",
                    "number": 1.0603314586797705
                },
                {
                    "label": "Chicago",
                    "number": 1.0168693269395443
                },
                {
                    "label": "Washington, D.C.",
                    "number": 0.9992089595736708
                }
            ],
            "answer": "San Francisco",
            "answerValue": 7.641705786731082,
            "question": "Which city's subreddit mentioned Airbnb the most?",
            "rowIndex": 190,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(airbnb)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n cities.city,\n SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(airbnb)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n SELECT\n   body,\n   subreddit\n FROM\n   TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n [subreddits.cities] cities\nON\n comments.subreddit = cities.subreddit\nGROUP BY\n cities.city\nORDER BY\n per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  cities.city,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(airbnb)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    body,\n    subreddit\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n  [subreddits.cities] cities\nON\n  comments.subreddit = cities.subreddit\nJOIN\n  [fh-bigquery:freebase20140119.triples_lang_en] aliases\nON\n  aliases.sub = cities.mid\nWHERE\n  (aliases.pred = '/common/topic/alias'\n    OR aliases.pred = '/type/object/name')\n  AND aliases.obj = 'userInput'\nGROUP BY\n  cities.city\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 532396361
        },
        {
            "top10": [
                {
                    "label": "Texas",
                    "number": 9.415755307327913
                },
                {
                    "label": "Wyoming",
                    "number": 5.188067444876784
                },
                {
                    "label": "Arkansas",
                    "number": 3.0823425803610744
                },
                {
                    "label": "New Mexico",
                    "number": 2.544529262086514
                },
                {
                    "label": "South Dakota",
                    "number": 2.202643171806167
                },
                {
                    "label": "Arizona",
                    "number": 2.179176755447942
                },
                {
                    "label": "Montana",
                    "number": 1.9342359767891684
                },
                {
                    "label": "Mississippi",
                    "number": 1.7605633802816902
                },
                {
                    "label": "California",
                    "number": 1.6313213703099512
                },
                {
                    "label": "Wisconsin",
                    "number": 1.4991255101190972
                }
            ],
            "answer": "Texas",
            "answerValue": 9.415755307327913,
            "question": "Which state’s subreddit talked tacos the most in the past year?",
            "rowIndex": 200,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(taco|tacos|taqueria)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(taco|tacos|taqueria)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(taco|tacos|taqueria)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "New Jersey",
                    "number": 6.52760736196319
                },
                {
                    "label": "Florida",
                    "number": 4.0209087253719344
                },
                {
                    "label": "New York",
                    "number": 3.933136676499508
                },
                {
                    "label": "Connecticut",
                    "number": 3.911342894393742
                },
                {
                    "label": "Michigan",
                    "number": 3.2273246823102264
                },
                {
                    "label": "Alabama",
                    "number": 2.535496957403651
                },
                {
                    "label": "Maine",
                    "number": 2.4965955515206537
                },
                {
                    "label": "Hawaii",
                    "number": 2.2104332449160036
                },
                {
                    "label": "California",
                    "number": 1.7171803897999485
                },
                {
                    "label": "Massachusetts",
                    "number": 1.5889830508474576
                }
            ],
            "answer": "New Jersey",
            "answerValue": 6.52760736196319,
            "question": "Which state’s subreddit got their barbecue on the most in the last year?",
            "rowIndex": 198,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(uber)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(uber)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(uber)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "England",
                    "number": 3915
                },
                {
                    "label": "Germany",
                    "number": 1819
                },
                {
                    "label": "Spain",
                    "number": 1166
                },
                {
                    "label": "France",
                    "number": 1117
                },
                {
                    "label": "Italy",
                    "number": 935
                },
                {
                    "label": "Brazil",
                    "number": 827
                },
                {
                    "label": "Argentina",
                    "number": 744
                },
                {
                    "label": "Mexico",
                    "number": 545
                },
                {
                    "label": "Portugal",
                    "number": 518
                },
                {
                    "label": "Qatar",
                    "number": 498
                }
            ],
            "answer": "England",
            "answerValue": 3915,
            "question": "Which country was mentioned the most in /r/soccer in the past month?",
            "rowIndex": 68,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "soccer"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'soccer') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'soccer') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 64411800
        },
        {
            "top10": [
                {
                    "label": "Delaware",
                    "number": 2.857142857142857
                },
                {
                    "label": "Arkansas",
                    "number": 1.7613386173491854
                },
                {
                    "label": "South Carolina",
                    "number": 0.7196833393306945
                },
                {
                    "label": "New Jersey",
                    "number": 0.34355828220858897
                },
                {
                    "label": "Indiana",
                    "number": 0.2498126405196103
                },
                {
                    "label": "Florida",
                    "number": 0.2010454362685967
                },
                {
                    "label": "Oklahoma",
                    "number": 0.11999040076793857
                },
                {
                    "label": "North Carolina",
                    "number": 0.10509721492380451
                },
                {
                    "label": "Connecticut",
                    "number": 0.08148631029986962
                },
                {
                    "label": "Minnesota",
                    "number": 0.060779189205615994
                }
            ],
            "answer": "Delaware",
            "answerValue": 2.857142857142857,
            "question": "Which state’s subreddit talked about Waffle House the most in the past year?",
            "rowIndex": 201,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(waffle house)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(waffle house)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(waffle house)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Mississippi",
                    "number": 7.042253521126761
                },
                {
                    "label": "Tennessee",
                    "number": 5.201560468140442
                },
                {
                    "label": "South Carolina",
                    "number": 3.5984166966534725
                },
                {
                    "label": "North Carolina",
                    "number": 3.468208092485549
                },
                {
                    "label": "Texas",
                    "number": 3.2750453242879702
                },
                {
                    "label": "Nevada",
                    "number": 3.236245954692557
                },
                {
                    "label": "Louisiana",
                    "number": 2.742230347349177
                },
                {
                    "label": "Alabama",
                    "number": 2.535496957403651
                },
                {
                    "label": "Oregon",
                    "number": 2.4075289997811335
                },
                {
                    "label": "Arkansas",
                    "number": 2.2016732716864817
                }
            ],
            "answer": "Mississippi",
            "answerValue": 7.042253521126761,
            "question": "In which state's subreddit would you see 'y'all' the most in the past year?",
            "rowIndex": 206,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(y\\'all|yall)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(y\\'all|yall)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(y\\'all|yall)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Japan",
                    "number": 166
                },
                {
                    "label": "Turkey",
                    "number": 93
                },
                {
                    "label": "England",
                    "number": 76
                },
                {
                    "label": "Canada",
                    "number": 49
                },
                {
                    "label": "Italy",
                    "number": 49
                },
                {
                    "label": "Australia",
                    "number": 48
                },
                {
                    "label": "Mexico",
                    "number": 43
                },
                {
                    "label": "Germany",
                    "number": 36
                },
                {
                    "label": "China",
                    "number": 34
                },
                {
                    "label": "Ecuador",
                    "number": 33
                }
            ],
            "answer": "Japan",
            "answerValue": 166,
            "question": "Which country was mentioned the most in /r/food in the past month?",
            "rowIndex": 156,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "food"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'food') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'food') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 63983874
        },
        {
            "top10": [
                {
                    "label": "Iowa",
                    "number": 2.7424582398404387
                },
                {
                    "label": "Idaho",
                    "number": 2.4479804161566707
                },
                {
                    "label": "Texas",
                    "number": 2.3393180887771217
                },
                {
                    "label": "New York",
                    "number": 1.966568338249754
                },
                {
                    "label": "Illinois",
                    "number": 1.7667844522968197
                },
                {
                    "label": "Ohio",
                    "number": 1.747487986020096
                },
                {
                    "label": "Missouri",
                    "number": 1.1862396204033214
                },
                {
                    "label": "Kentucky",
                    "number": 1.0559662090813093
                },
                {
                    "label": "Utah",
                    "number": 1.0476689366160294
                },
                {
                    "label": "Oklahoma",
                    "number": 0.9599232061435086
                }
            ],
            "answer": "Iowa",
            "answerValue": 2.7424582398404387,
            "question": "Which state's subreddit mentioned Ted Cruz the most in the past year?",
            "rowIndex": 215,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(ted cruz)\\b",
                "per": 1000
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(ted cruz)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(ted cruz)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Nevada",
                    "number": 9.06148867313916
                },
                {
                    "label": "New York",
                    "number": 6.784660766961652
                },
                {
                    "label": "Nebraska",
                    "number": 6.717557251908397
                },
                {
                    "label": "South Carolina",
                    "number": 5.325656711047139
                },
                {
                    "label": "Iowa",
                    "number": 3.5402642732485665
                },
                {
                    "label": "Missouri",
                    "number": 3.0842230130486357
                },
                {
                    "label": "Tennessee",
                    "number": 2.6657997399219764
                },
                {
                    "label": "Ohio",
                    "number": 2.5557011795543905
                },
                {
                    "label": "Montana",
                    "number": 2.1760154738878144
                },
                {
                    "label": "Vermont",
                    "number": 2.1467327199811277
                }
            ],
            "answer": "Nevada",
            "answerValue": 9.06148867313916,
            "question": "Which state's subreddit mentioned Bernie Sanders the most in the past year?",
            "rowIndex": 216,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(bernie|sanders|#?feelthebern)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(bernie|sanders|#?feelthebern)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(bernie|sanders|#?feelthebern)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "San Francisco",
                    "number": 2.3547999939230966
                },
                {
                    "label": "New York City",
                    "number": 2.1866526720895654
                },
                {
                    "label": "Portland",
                    "number": 1.6776629849589888
                },
                {
                    "label": "Montreal",
                    "number": 1.1166166515458162
                },
                {
                    "label": "Washington, D.C.",
                    "number": 1.0408426662225738
                },
                {
                    "label": "Seattle",
                    "number": 0.9555661729574773
                },
                {
                    "label": "Los Angeles",
                    "number": 0.8407914650324172
                },
                {
                    "label": "Philadelphia",
                    "number": 0.7279079924297569
                },
                {
                    "label": "Atlanta",
                    "number": 0.6131691208030764
                },
                {
                    "label": "Boston",
                    "number": 0.5957151831553409
                }
            ],
            "answer": "San Francisco",
            "answerValue": 2.3547999939230966,
            "question": "Which city’s subreddit described things as \"artisanal\" the most?",
            "rowIndex": 211,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(artisanal)\\b",
                "per": 10000
            },
            "sql": "\nSELECT\n cities.city,\n SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(artisanal)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n SELECT\n   body,\n   subreddit\n FROM\n   TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n [subreddits.cities] cities\nON\n comments.subreddit = cities.subreddit\nGROUP BY\n cities.city\nORDER BY\n per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  cities.city,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(artisanal)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    body,\n    subreddit\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n  [subreddits.cities] cities\nON\n  comments.subreddit = cities.subreddit\nJOIN\n  [fh-bigquery:freebase20140119.triples_lang_en] aliases\nON\n  aliases.sub = cities.mid\nWHERE\n  (aliases.pred = '/common/topic/alias'\n    OR aliases.pred = '/type/object/name')\n  AND aliases.obj = 'userInput'\nGROUP BY\n  cities.city\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 532396361
        },
        {
            "top10": [
                {
                    "label": "Los Angeles",
                    "number": 6.072382803011902
                },
                {
                    "label": "San Diego",
                    "number": 3.663200991219092
                },
                {
                    "label": "Houston",
                    "number": 3.431086431827862
                },
                {
                    "label": "Vancouver",
                    "number": 2.4166097037236502
                },
                {
                    "label": "Boston",
                    "number": 1.9496133266902065
                },
                {
                    "label": "Dallas",
                    "number": 1.869775626924769
                },
                {
                    "label": "Montreal",
                    "number": 1.8145020587619514
                },
                {
                    "label": "Chicago",
                    "number": 1.462864645772678
                },
                {
                    "label": "Washington, D.C.",
                    "number": 1.3877902216300984
                },
                {
                    "label": "Denver",
                    "number": 1.3352026169971294
                }
            ],
            "answer": "Los Angeles",
            "answerValue": 6.072382803011902,
            "question": "Which city’s subreddit talked about gas prices the most?",
            "rowIndex": 214,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(gas prices?|price of gas)\\b",
                "per": 10000
            },
            "sql": "\nSELECT\n cities.city,\n SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(gas prices?|price of gas)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n SELECT\n   body,\n   subreddit\n FROM\n   TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n [subreddits.cities] cities\nON\n comments.subreddit = cities.subreddit\nGROUP BY\n cities.city\nORDER BY\n per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  cities.city,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(gas prices?|price of gas)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    body,\n    subreddit\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n  [subreddits.cities] cities\nON\n  comments.subreddit = cities.subreddit\nJOIN\n  [fh-bigquery:freebase20140119.triples_lang_en] aliases\nON\n  aliases.sub = cities.mid\nWHERE\n  (aliases.pred = '/common/topic/alias'\n    OR aliases.pred = '/type/object/name')\n  AND aliases.obj = 'userInput'\nGROUP BY\n  cities.city\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 532396361
        },
        {
            "top10": [
                {
                    "label": "Ohio",
                    "number": 3.757099169943207
                },
                {
                    "label": "New York",
                    "number": 0.688298918387414
                },
                {
                    "label": "Wisconsin",
                    "number": 0.3997668026984259
                },
                {
                    "label": "Idaho",
                    "number": 0.3671970624235006
                },
                {
                    "label": "Arizona",
                    "number": 0.14527845036319612
                },
                {
                    "label": "South Carolina",
                    "number": 0.1439366678661389
                },
                {
                    "label": "Pennsylvania",
                    "number": 0.14250089063056645
                },
                {
                    "label": "Florida",
                    "number": 0.1407318053880177
                },
                {
                    "label": "Tennessee",
                    "number": 0.13003901170351106
                },
                {
                    "label": "North Dakota",
                    "number": 0.12562814070351758
                }
            ],
            "answer": "Ohio",
            "answerValue": 3.757099169943207,
            "question": "Which state's subreddit mentioned John Kasich the most in the past year?",
            "rowIndex": 218,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(kasich)\\b",
                "per": 100
            },
            "sql": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(kasich)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  states.state AS state,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(kasich)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per\nFROM (\n  SELECT\n    *\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^2016\")')) comments\nJOIN\n  [subreddits.states] states\nON\n  states.subreddit = comments.subreddit\nWHERE\n  states.state = 'userInput'\nGROUP BY\n  state\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "% of Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 185166080
        },
        {
            "top10": [
                {
                    "label": "Barack Obama",
                    "number": 9881003
                },
                {
                    "label": "Abraham Lincoln",
                    "number": 2053409
                },
                {
                    "label": "Andrew Jackson",
                    "number": 1865590
                },
                {
                    "label": "Ronald Reagan",
                    "number": 1691374
                },
                {
                    "label": "Bill Clinton",
                    "number": 1668313
                },
                {
                    "label": "George Washington",
                    "number": 1393824
                },
                {
                    "label": "Richard Nixon",
                    "number": 1332894
                },
                {
                    "label": "Thomas Jefferson",
                    "number": 1061515
                },
                {
                    "label": "Theodore Roosevelt",
                    "number": 1037221
                },
                {
                    "label": "Jimmy Carter",
                    "number": 902443
                }
            ],
            "answer": "Barack Obama",
            "answerValue": 9881003,
            "question": "Which U.S. President had the most popular page in the past month?",
            "rowIndex": 141,
            "approved": true,
            "params": {
                "freebase_tag": "presidents",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.presidents]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.presidents]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6525598971
        },
        {
            "top10": [
                {
                    "label": "Germany",
                    "number": 399
                },
                {
                    "label": "France",
                    "number": 289
                },
                {
                    "label": "England",
                    "number": 252
                },
                {
                    "label": "China",
                    "number": 238
                },
                {
                    "label": "Russia",
                    "number": 177
                },
                {
                    "label": "Japan",
                    "number": 149
                },
                {
                    "label": "Italy",
                    "number": 139
                },
                {
                    "label": "Soviet Union",
                    "number": 119
                },
                {
                    "label": "Spain",
                    "number": 116
                },
                {
                    "label": "India",
                    "number": 106
                }
            ],
            "answer": "Germany",
            "answerValue": 399,
            "question": "Which country was mentioned the most in /r/AskHistorians in the past month?",
            "rowIndex": 160,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "askhistorians"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'askhistorians') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'askhistorians') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 63945564
        },
        {
            "top10": [
                {
                    "label": "Delphi",
                    "number": 6.924672010208558
                },
                {
                    "label": "Lua",
                    "number": 5.8757026557943925
                },
                {
                    "label": "Haxe",
                    "number": 5.438492616327668
                },
                {
                    "label": "Pascal",
                    "number": 5.063406291505195
                },
                {
                    "label": "C#",
                    "number": 4.816082688616006
                },
                {
                    "label": "ActionScript",
                    "number": 4.806673783390556
                },
                {
                    "label": "FORTRAN",
                    "number": 4.744844363354896
                },
                {
                    "label": "ColdFusion",
                    "number": 4.611925634824668
                },
                {
                    "label": "Common Lisp",
                    "number": 4.298803745525572
                },
                {
                    "label": "C++",
                    "number": 4.270688408831364
                }
            ],
            "answer": "Delphi",
            "answerValue": 6.924672010208558,
            "question": "Developers of which programming language say 'fixed' the most?",
            "rowIndex": 227,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(fixed)\\b",
                "per": 100,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(fixed)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(fixed)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "% of Commits",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 5.387616444173147
                },
                {
                    "label": "Lua",
                    "number": 4.744325292956285
                },
                {
                    "label": "C",
                    "number": 4.640348056947883
                },
                {
                    "label": "Haxe",
                    "number": 4.545137921426581
                },
                {
                    "label": "C++",
                    "number": 4.22177363355125
                },
                {
                    "label": "D",
                    "number": 4.012450098112186
                },
                {
                    "label": "OCaml",
                    "number": 4.0033902584170376
                },
                {
                    "label": "VHDL",
                    "number": 3.906397433478015
                },
                {
                    "label": "Common Lisp",
                    "number": 3.814266193865319
                },
                {
                    "label": "Logos",
                    "number": 3.802412209012233
                }
            ],
            "answer": "Rust",
            "answerValue": 5.387616444173147,
            "question": "Developers of which programming language say 'again' the most?",
            "rowIndex": 221,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(again)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(again)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(again)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "ColdFusion",
                    "number": 2.607315598548972
                },
                {
                    "label": "PHP",
                    "number": 2.2029709995813493
                },
                {
                    "label": "Puppet",
                    "number": 1.6378968780125602
                },
                {
                    "label": "Groovy",
                    "number": 1.5831470658704427
                },
                {
                    "label": "CoffeeScript",
                    "number": 1.018719677611806
                },
                {
                    "label": "Python",
                    "number": 0.928215593959367
                },
                {
                    "label": "Scala",
                    "number": 0.9256439132409351
                },
                {
                    "label": "PowerShell",
                    "number": 0.8516827912228825
                },
                {
                    "label": "Ruby",
                    "number": 0.7828175100985231
                },
                {
                    "label": "Haxe",
                    "number": 0.713987183059348
                }
            ],
            "answer": "ColdFusion",
            "answerValue": 2.607315598548972,
            "question": "Which programming language has the most hotfixes?",
            "rowIndex": 231,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(hotfix)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hotfix)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hotfix)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Haskell",
                    "number": 1.633605600933489
                },
                {
                    "label": "Racket",
                    "number": 1.5491553735485089
                },
                {
                    "label": "Erlang",
                    "number": 1.390615149058813
                },
                {
                    "label": "Common Lisp",
                    "number": 1.265833396205853
                },
                {
                    "label": "C",
                    "number": 1.2312476344050802
                },
                {
                    "label": "Perl",
                    "number": 1.210240533803809
                },
                {
                    "label": "Lua",
                    "number": 1.1885678668936606
                },
                {
                    "label": "ColdFusion",
                    "number": 1.1147218863361548
                },
                {
                    "label": "Scheme",
                    "number": 1.1071615873200862
                },
                {
                    "label": "CoffeeScript",
                    "number": 1.067122933012146
                }
            ],
            "answer": "Haskell",
            "answerValue": 1.633605600933489,
            "question": "Developers of which programming language say 'oops' the most?",
            "rowIndex": 233,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(oops)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(oops)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(oops)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 8.386634464821253
                },
                {
                    "label": "Logos",
                    "number": 6.021919788028423
                },
                {
                    "label": "ASP",
                    "number": 5.846927439630474
                },
                {
                    "label": "Visual Basic",
                    "number": 5.5859782787861025
                },
                {
                    "label": "Lua",
                    "number": 5.569857786279915
                },
                {
                    "label": "Racket",
                    "number": 5.523075679607727
                },
                {
                    "label": "Julia",
                    "number": 4.991348329562093
                },
                {
                    "label": "Common Lisp",
                    "number": 4.945971548089094
                },
                {
                    "label": "C",
                    "number": 4.739635114189663
                },
                {
                    "label": "VHDL",
                    "number": 4.529156444612191
                }
            ],
            "answer": "Rust",
            "answerValue": 8.386634464821253,
            "question": "Developers of which programming language say 'don't know' the most?",
            "rowIndex": 230,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(don\\'?t know|dunno)\\b",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(don\\'?t know|dunno)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(don\\'?t know|dunno)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Emacs Lisp",
                    "number": 2.117034066869839
                },
                {
                    "label": "FORTRAN",
                    "number": 2.100956488085365
                },
                {
                    "label": "VimL",
                    "number": 1.7944362467542867
                },
                {
                    "label": "ColdFusion",
                    "number": 1.700423216444982
                },
                {
                    "label": "Ruby",
                    "number": 1.6371991910210595
                },
                {
                    "label": "OCaml",
                    "number": 1.5628850858685133
                },
                {
                    "label": "PHP",
                    "number": 1.5353475863732802
                },
                {
                    "label": "Objective-C",
                    "number": 1.4430943495085709
                },
                {
                    "label": "R",
                    "number": 1.4395588144840556
                },
                {
                    "label": "JavaScript",
                    "number": 1.3254715971271585
                }
            ],
            "answer": "Emacs Lisp",
            "answerValue": 2.117034066869839,
            "question": "Which programming language fixes the most conflicts in its commits?",
            "rowIndex": 234,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(fix(ed)? conflict)\\b",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(fix(ed)? conflict)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(fix(ed)? conflict)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Dart",
                    "number": 1.3746915756080367
                },
                {
                    "label": "FORTRAN",
                    "number": 0.24326864598883174
                },
                {
                    "label": "Julia",
                    "number": 0.18856204800567905
                },
                {
                    "label": "C",
                    "number": 0.18109606742472434
                },
                {
                    "label": "Lua",
                    "number": 0.17074266428179502
                },
                {
                    "label": "Matlab",
                    "number": 0.14258134978912218
                },
                {
                    "label": "TypeScript",
                    "number": 0.14195006633435792
                },
                {
                    "label": "Delphi",
                    "number": 0.1395701240180245
                },
                {
                    "label": "Rust",
                    "number": 0.10085193343772393
                },
                {
                    "label": "OCaml",
                    "number": 0.09617754374575466
                }
            ],
            "answer": "Dart",
            "answerValue": 1.3746915756080367,
            "question": "Which programming language has the most +1s in its commits?",
            "rowIndex": 236,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(\\+1)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(\\+1)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(\\+1)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "R",
                    "number": 4.093581792460115
                },
                {
                    "label": "Matlab",
                    "number": 4.0464587070152875
                },
                {
                    "label": "FORTRAN",
                    "number": 3.892298335821308
                },
                {
                    "label": "TeX",
                    "number": 3.5821322341104027
                },
                {
                    "label": "Prolog",
                    "number": 2.7588043912555413
                },
                {
                    "label": "Arduino",
                    "number": 2.6208190897513237
                },
                {
                    "label": "Logos",
                    "number": 2.5980282514065483
                },
                {
                    "label": "Haxe",
                    "number": 2.05488994148788
                },
                {
                    "label": "Julia",
                    "number": 1.996539331824837
                },
                {
                    "label": "C#",
                    "number": 1.961676656047793
                }
            ],
            "answer": "R",
            "answerValue": 4.093581792460115,
            "question": "Which programming language commits the most minor changes?",
            "rowIndex": 240,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(minor changes?)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(minor changes?)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(minor changes?)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Swift",
                    "number": 5.975985805095695
                },
                {
                    "label": "Arduino",
                    "number": 5.256384476171325
                },
                {
                    "label": "VHDL",
                    "number": 5.0179279109265895
                },
                {
                    "label": "Processing",
                    "number": 4.360173067391799
                },
                {
                    "label": "R",
                    "number": 3.7554163400394964
                },
                {
                    "label": "Visual Basic",
                    "number": 3.377227523305434
                },
                {
                    "label": "PowerShell",
                    "number": 3.299553105771347
                },
                {
                    "label": "Objective-C",
                    "number": 3.22591531034299
                },
                {
                    "label": "Go",
                    "number": 2.9125469939111213
                },
                {
                    "label": "Elixir",
                    "number": 2.823812245058821
                }
            ],
            "answer": "Swift",
            "answerValue": 5.975985805095695,
            "question": "Developers of which programming language update their READMEs the most?",
            "rowIndex": 239,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(update readme)\\b",
                "per": 100,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(update readme)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(update readme)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "% of Commits",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 2.0807346267151465
                },
                {
                    "label": "C",
                    "number": 1.8763197577865802
                },
                {
                    "label": "Racket",
                    "number": 1.562626289840235
                },
                {
                    "label": "Common Lisp",
                    "number": 1.492174467050608
                },
                {
                    "label": "OCaml",
                    "number": 1.4546853491545393
                },
                {
                    "label": "Assembly",
                    "number": 1.4240544519804013
                },
                {
                    "label": "Emacs Lisp",
                    "number": 1.2670606877832915
                },
                {
                    "label": "Go",
                    "number": 1.2528212085632533
                },
                {
                    "label": "C++",
                    "number": 1.2343664445686766
                },
                {
                    "label": "D",
                    "number": 1.2111780228702889
                }
            ],
            "answer": "Rust",
            "answerValue": 2.0807346267151465,
            "question": "Developers of which programming language call out hacks the most?",
            "rowIndex": 242,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(hack|hacks)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hack|hacks)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hack|hacks)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Elixir",
                    "number": 1.1646008631052083
                },
                {
                    "label": "Clojure",
                    "number": 1.1387549583379672
                },
                {
                    "label": "Haskell",
                    "number": 0.9383173057578562
                },
                {
                    "label": "CoffeeScript",
                    "number": 0.9358713148800613
                },
                {
                    "label": "F#",
                    "number": 0.8356884964368297
                },
                {
                    "label": "Ruby",
                    "number": 0.7384274701770243
                },
                {
                    "label": "Tcl",
                    "number": 0.7088755098077296
                },
                {
                    "label": "Dart",
                    "number": 0.6106802960874163
                },
                {
                    "label": "Puppet",
                    "number": 0.5016644152084184
                },
                {
                    "label": "Scala",
                    "number": 0.45816122028916073
                }
            ],
            "answer": "Elixir",
            "answerValue": 1.1646008631052083,
            "question": "Which programming language bumps versions the most?",
            "rowIndex": 249,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(bump.*version)\\b",
                "per": 100,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(bump.*version)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(bump.*version)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "% of Commits",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Batman",
                    "number": 1544853
                },
                {
                    "label": "Superman",
                    "number": 1434153
                },
                {
                    "label": "Spider-Man",
                    "number": 1032563
                },
                {
                    "label": "Iron Man",
                    "number": 731749
                },
                {
                    "label": "Doctor Strange",
                    "number": 706163
                },
                {
                    "label": "Wonder Woman",
                    "number": 670942
                },
                {
                    "label": "Harley Quinn",
                    "number": 558141
                },
                {
                    "label": "Punisher",
                    "number": 524912
                },
                {
                    "label": "Captain America",
                    "number": 467760
                },
                {
                    "label": "He-Man",
                    "number": 351251
                }
            ],
            "answer": "Batman",
            "answerValue": 1544853,
            "question": "What comic book character was the most popular in the past month?",
            "rowIndex": 194,
            "approved": true,
            "params": {
                "freebase_tag": "comic_characters"
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.comic_characters]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.comic_characters]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name = 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6536187680
        },
        {
            "top10": [
                {
                    "label": "Cream cheese",
                    "number": 5
                },
                {
                    "label": "Mozzarella",
                    "number": 5
                },
                {
                    "label": "Brie",
                    "number": 3
                },
                {
                    "label": "Provolone",
                    "number": 3
                },
                {
                    "label": "American cheese",
                    "number": 2
                },
                {
                    "label": "Mimolette",
                    "number": 2
                },
                {
                    "label": "The Laughing Cow",
                    "number": 1
                },
                {
                    "label": "Basket cheese",
                    "number": 1
                },
                {
                    "label": "Kraft Singles",
                    "number": 1
                },
                {
                    "label": "Brie de Meaux",
                    "number": 1
                }
            ],
            "answer": "Cream cheese",
            "answerValue": 5,
            "question": "What cheese was found most often in /r/GrilledCheese in the past month?",
            "rowIndex": 208,
            "approved": true,
            "params": {
                "freebase_tag": "cheese",
                "subreddit": "grilledcheese",
                "substring": true,
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cheese]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'grilledcheese') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.cheese]\n      WHERE\n        name = 'userInput'\n      OR name CONTAINS CONCAT(' ', 'userInput')\n      OR name CONTAINS CONCAT('userInput', ' ')\n) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'grilledcheese') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 6592241573
        },
        {
            "top10": [
                {
                    "label": "Pancake",
                    "number": 223077
                },
                {
                    "label": "Hamburger",
                    "number": 190247
                },
                {
                    "label": "Hot dog",
                    "number": 112706
                },
                {
                    "label": "Oreo",
                    "number": 96678
                },
                {
                    "label": "Black pudding",
                    "number": 90794
                },
                {
                    "label": "Mojito",
                    "number": 86839
                },
                {
                    "label": "Martini",
                    "number": 86013
                },
                {
                    "label": "Ice cream",
                    "number": 78278
                },
                {
                    "label": "Burrito",
                    "number": 71979
                },
                {
                    "label": "Tiramisu",
                    "number": 68592
                }
            ],
            "answer": "Pancake",
            "answerValue": 223077,
            "question": "What food was viewed the most in the past month?",
            "rowIndex": 248,
            "approved": true,
            "params": {
                "freebase_tag": "food_dishes",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.food_dishes]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.food_dishes]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6532463443
        },
        {
            "top10": [
                {
                    "label": "Australia",
                    "number": 26443
                },
                {
                    "label": "United States",
                    "number": 10687
                },
                {
                    "label": "United Kingdom",
                    "number": 6463
                },
                {
                    "label": "China",
                    "number": 5175
                },
                {
                    "label": "Canada",
                    "number": 2849
                },
                {
                    "label": "France",
                    "number": 2652
                },
                {
                    "label": "Japan",
                    "number": 2172
                },
                {
                    "label": "Iraq",
                    "number": 1649
                },
                {
                    "label": "Vietnam",
                    "number": 1377
                },
                {
                    "label": "Turkey",
                    "number": 1338
                }
            ],
            "answer": "Australia",
            "answerValue": 26443,
            "question": "Which country was mentioned with New Zealand the most last year?",
            "rowIndex": 263,
            "approved": true,
            "params": {
                "country": "New Zealand",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'New Zealand' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'New Zealand' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761317497
        },
        {
            "top10": [
                {
                    "label": "United States",
                    "number": 129654
                },
                {
                    "label": "Japan",
                    "number": 50486
                },
                {
                    "label": "Russia",
                    "number": 48841
                },
                {
                    "label": "United Kingdom",
                    "number": 37946
                },
                {
                    "label": "Pakistan",
                    "number": 28558
                },
                {
                    "label": "Taiwan",
                    "number": 26521
                },
                {
                    "label": "Australia",
                    "number": 23346
                },
                {
                    "label": "France",
                    "number": 23058
                },
                {
                    "label": "South Korea",
                    "number": 22825
                },
                {
                    "label": "Philippines",
                    "number": 21712
                }
            ],
            "answer": "United States",
            "answerValue": 129654,
            "question": "Which country was mentioned with China the most last year?",
            "rowIndex": 265,
            "approved": true,
            "params": {
                "country": "China",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'China' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'China' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761334193
        },
        {
            "top10": [
                {
                    "label": "South Korea",
                    "number": 30196
                },
                {
                    "label": "United States",
                    "number": 13973
                },
                {
                    "label": "China",
                    "number": 13124
                },
                {
                    "label": "Russia",
                    "number": 4929
                },
                {
                    "label": "Japan",
                    "number": 4468
                },
                {
                    "label": "Iran",
                    "number": 3459
                },
                {
                    "label": "Canada",
                    "number": 1661
                },
                {
                    "label": "United Kingdom",
                    "number": 781
                },
                {
                    "label": "Cuba",
                    "number": 630
                },
                {
                    "label": "Pakistan",
                    "number": 521
                }
            ],
            "answer": "South Korea",
            "answerValue": 30196,
            "question": "Which country was mentioned with North Korea the most last year?",
            "rowIndex": 264,
            "approved": true,
            "params": {
                "country": "North Korea",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'North Korea' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'North Korea' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761310688
        },
        {
            "top10": [
                {
                    "label": "Great Pyramid of Giza",
                    "number": 1441001
                },
                {
                    "label": "Taj Mahal",
                    "number": 1151819
                },
                {
                    "label": "Machu Picchu",
                    "number": 966097
                },
                {
                    "label": "Coachella Valley Music and Arts Festival",
                    "number": 944180
                },
                {
                    "label": "Burj Khalifa",
                    "number": 924418
                },
                {
                    "label": "Big Ben",
                    "number": 745682
                },
                {
                    "label": "Mount Everest",
                    "number": 688324
                },
                {
                    "label": "Great Wall of China",
                    "number": 657477
                },
                {
                    "label": "Empire State Building",
                    "number": 613821
                },
                {
                    "label": "Eiffel Tower",
                    "number": 602595
                }
            ],
            "answer": "Great Pyramid of Giza",
            "answerValue": 1441001,
            "question": "What tourist attraction was viewed the most in the past month?",
            "rowIndex": 246,
            "approved": true,
            "params": {
                "freebase_tag": "tourist_attractions",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.tourist_attractions]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.tourist_attractions]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6711907690
        },
        {
            "top10": [
                {
                    "label": "United Kingdom",
                    "number": 4002
                },
                {
                    "label": "Nigeria",
                    "number": 2713
                },
                {
                    "label": "China",
                    "number": 2376
                },
                {
                    "label": "Australia",
                    "number": 2163
                },
                {
                    "label": "Zimbabwe",
                    "number": 1794
                },
                {
                    "label": "Mozambique",
                    "number": 1071
                },
                {
                    "label": "Sudan",
                    "number": 1047
                },
                {
                    "label": "France",
                    "number": 914
                },
                {
                    "label": "Israel",
                    "number": 913
                },
                {
                    "label": "Namibia",
                    "number": 635
                }
            ],
            "answer": "United Kingdom",
            "answerValue": 4002,
            "question": "Which country, besides the United States, was mentioned with South Africa the most last year?",
            "rowIndex": 266,
            "approved": true,
            "params": {
                "country": "South Africa",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'South Africa' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'South Africa' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761314911
        },
        {
            "top10": [
                {
                    "label": "Germany",
                    "number": 24092
                },
                {
                    "label": "Turkey",
                    "number": 17854
                },
                {
                    "label": "Russia",
                    "number": 10558
                },
                {
                    "label": "Belgium",
                    "number": 9776
                },
                {
                    "label": "France",
                    "number": 9434
                },
                {
                    "label": "Italy",
                    "number": 8283
                },
                {
                    "label": "United Kingdom",
                    "number": 8254
                },
                {
                    "label": "Cyprus",
                    "number": 7171
                },
                {
                    "label": "Syria",
                    "number": 5258
                },
                {
                    "label": "Albania",
                    "number": 4805
                }
            ],
            "answer": "Germany",
            "answerValue": 24092,
            "question": "Which country, besides the United States, was mentioned with Greece the most last year?",
            "rowIndex": 267,
            "approved": true,
            "params": {
                "country": "Greece",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Greece' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Greece' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761319545
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 5591
                },
                {
                    "label": "Argentina",
                    "number": 2772
                },
                {
                    "label": "United Kingdom",
                    "number": 2526
                },
                {
                    "label": "Indonesia",
                    "number": 2342
                },
                {
                    "label": "Russia",
                    "number": 2118
                },
                {
                    "label": "France",
                    "number": 1955
                },
                {
                    "label": "Australia",
                    "number": 1839
                },
                {
                    "label": "Mexico",
                    "number": 1785
                },
                {
                    "label": "Chile",
                    "number": 1681
                },
                {
                    "label": "Spain",
                    "number": 1632
                }
            ],
            "answer": "China",
            "answerValue": 5591,
            "question": "Which country, besides the United States, was mentioned with Brazil the most last year?",
            "rowIndex": 268,
            "approved": true,
            "params": {
                "country": "Brazil",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Brazil' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Brazil' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761318228
        },
        {
            "top10": [
                {
                    "label": "Syria",
                    "number": 62594
                },
                {
                    "label": "Russia",
                    "number": 55527
                },
                {
                    "label": "United States",
                    "number": 35808
                },
                {
                    "label": "Iraq",
                    "number": 23955
                },
                {
                    "label": "Armenia",
                    "number": 19014
                },
                {
                    "label": "Greece",
                    "number": 17854
                },
                {
                    "label": "Iran",
                    "number": 13959
                },
                {
                    "label": "United Kingdom",
                    "number": 11976
                },
                {
                    "label": "Israel",
                    "number": 10927
                },
                {
                    "label": "France",
                    "number": 10570
                }
            ],
            "answer": "Syria",
            "answerValue": 62594,
            "question": "Which country was mentioned with Turkey the most last year?",
            "rowIndex": 271,
            "approved": true,
            "params": {
                "country": "Turkey",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Turkey' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Turkey' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761323980
        },
        {
            "top10": [
                {
                    "label": "Norway",
                    "number": 1186
                },
                {
                    "label": "United Kingdom",
                    "number": 988
                },
                {
                    "label": "Denmark",
                    "number": 659
                },
                {
                    "label": "Sweden",
                    "number": 464
                },
                {
                    "label": "Canada",
                    "number": 453
                },
                {
                    "label": "Russia",
                    "number": 430
                },
                {
                    "label": "Finland",
                    "number": 417
                },
                {
                    "label": "Israel",
                    "number": 360
                },
                {
                    "label": "France",
                    "number": 303
                },
                {
                    "label": "Japan",
                    "number": 296
                }
            ],
            "answer": "Norway",
            "answerValue": 1186,
            "question": "Which country, besides the United States, was mentioned with Iceland the most last year?",
            "rowIndex": 270,
            "approved": true,
            "params": {
                "country": "Iceland",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Iceland' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Iceland' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761308189
        },
        {
            "top10": [
                {
                    "label": "John Lennon",
                    "number": 1352088
                },
                {
                    "label": "Kurt Cobain",
                    "number": 1306140
                },
                {
                    "label": "Jimi Hendrix",
                    "number": 1010957
                },
                {
                    "label": "George Harrison",
                    "number": 958153
                },
                {
                    "label": "Iron Maiden",
                    "number": 800018
                },
                {
                    "label": "Eric Clapton",
                    "number": 798818
                },
                {
                    "label": "Frank Zappa",
                    "number": 592604
                },
                {
                    "label": "Neil Young",
                    "number": 501951
                },
                {
                    "label": "David Gilmour",
                    "number": 482341
                },
                {
                    "label": "Willie Nelson",
                    "number": 476467
                }
            ],
            "answer": "John Lennon",
            "answerValue": 1352088,
            "question": "What guitarist was the most popular in the past month?",
            "rowIndex": 251,
            "approved": true,
            "params": {
                "freebase_tag": "guitarists",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.guitarists]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.guitarists]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6524077349
        },
        {
            "top10": [
                {
                    "label": "Royal Air Force",
                    "number": 533988
                },
                {
                    "label": "Delta Air Lines",
                    "number": 440150
                },
                {
                    "label": "United Airlines",
                    "number": 406821
                },
                {
                    "label": "American Airlines",
                    "number": 351765
                },
                {
                    "label": "British Airways",
                    "number": 286247
                },
                {
                    "label": "Turkish Airlines",
                    "number": 284760
                },
                {
                    "label": "Ryanair",
                    "number": 270067
                },
                {
                    "label": "Air France",
                    "number": 250524
                },
                {
                    "label": "Southwest Airlines",
                    "number": 234313
                },
                {
                    "label": "Lufthansa",
                    "number": 225358
                }
            ],
            "answer": "Royal Air Force",
            "answerValue": 533988,
            "question": "What airline was visited the most on Wikipedia in the past month?",
            "rowIndex": 253,
            "approved": true,
            "params": {
                "freebase_tag": "airlines",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.airlines]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.airlines]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6574787882
        },
        {
            "top10": [
                {
                    "label": "Meat",
                    "number": 889
                },
                {
                    "label": "Water",
                    "number": 846
                },
                {
                    "label": "Oil",
                    "number": 765
                },
                {
                    "label": "Cheese",
                    "number": 735
                },
                {
                    "label": "Butter",
                    "number": 553
                },
                {
                    "label": "Garlic",
                    "number": 548
                },
                {
                    "label": "Olive",
                    "number": 456
                },
                {
                    "label": "Beef",
                    "number": 450
                },
                {
                    "label": "Rice",
                    "number": 438
                },
                {
                    "label": "Egg",
                    "number": 401
                }
            ],
            "answer": "Meat",
            "answerValue": 889,
            "question": "What's the most popular ingredient found in /r/cooking in the past month?",
            "rowIndex": 205,
            "approved": true,
            "params": {
                "freebase_tag": "ingredients",
                "subreddit": "cooking",
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.ingredients]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'cooking') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.ingredients]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'cooking') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 6631701829
        },
        {
            "top10": [
                {
                    "label": "The New York Times",
                    "number": 1248584
                },
                {
                    "label": "The Guardian",
                    "number": 729878
                },
                {
                    "label": "USA Today",
                    "number": 400897
                },
                {
                    "label": "The Times",
                    "number": 351615
                },
                {
                    "label": "The Washington Post",
                    "number": 327458
                },
                {
                    "label": "The Daily Telegraph",
                    "number": 308294
                },
                {
                    "label": "The Wall Street Journal",
                    "number": 261723
                },
                {
                    "label": "Los Angeles Times",
                    "number": 231990
                },
                {
                    "label": "The Economist",
                    "number": 194620
                },
                {
                    "label": "The Independent",
                    "number": 182967
                }
            ],
            "answer": "The New York Times",
            "answerValue": 1248584,
            "question": "What newspaper had the most popular Wikipedia page in the past month?",
            "rowIndex": 255,
            "approved": true,
            "params": {
                "freebase_tag": "newspapers",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.newspapers]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.newspapers]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6580099034
        },
        {
            "top10": [
                {
                    "label": "Djibouti",
                    "number": 25.3639846743295
                },
                {
                    "label": "Cape Verde",
                    "number": 23.431635388739945
                },
                {
                    "label": "Saint Helena",
                    "number": 19.78319783197832
                },
                {
                    "label": "Macao",
                    "number": 18.06020066889632
                },
                {
                    "label": "Paraguay",
                    "number": 18.03009339328952
                },
                {
                    "label": "Dominican Republic",
                    "number": 16.598422051333266
                },
                {
                    "label": "Aruba",
                    "number": 16.597510373443985
                },
                {
                    "label": "Palau",
                    "number": 15.908301493574157
                },
                {
                    "label": "Seychelles",
                    "number": 15.890206329941181
                },
                {
                    "label": "Sao Tome and Principe",
                    "number": 15.538847117794486
                }
            ],
            "answer": "Djibouti",
            "answerValue": 25.3639846743295,
            "question": "Which country was the most hospitable to visiting officials last year?",
            "rowIndex": 287,
            "approved": true,
            "params": {
                "codes": "('043')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('043') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('043') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "Rolling Stone",
                    "number": 553155
                },
                {
                    "label": "Time",
                    "number": 469851
                },
                {
                    "label": "Playboy",
                    "number": 251774
                },
                {
                    "label": "The Economist",
                    "number": 194620
                },
                {
                    "label": "Der Spiegel",
                    "number": 188887
                },
                {
                    "label": "Billboard",
                    "number": 180085
                },
                {
                    "label": "De Stijl",
                    "number": 175891
                },
                {
                    "label": "Life Magazine",
                    "number": 166760
                },
                {
                    "label": "Newsweek",
                    "number": 146112
                },
                {
                    "label": "Nature",
                    "number": 143112
                }
            ],
            "answer": "Rolling Stone",
            "answerValue": 553155,
            "question": "What magazine had the most popular Wikipedia page in the past month?",
            "rowIndex": 254,
            "approved": true,
            "params": {
                "freebase_tag": "magazines",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.magazines]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.magazines]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6553558098
        },
        {
            "top10": [
                {
                    "label": "Go",
                    "number": 2.9694171023735403
                },
                {
                    "label": "Erlang",
                    "number": 2.8100513374763576
                },
                {
                    "label": "Scala",
                    "number": 2.7097304251783814
                },
                {
                    "label": "Emacs Lisp",
                    "number": 2.606795679354652
                },
                {
                    "label": "Rust",
                    "number": 2.54783831842671
                },
                {
                    "label": "Haskell",
                    "number": 2.2854383776606446
                },
                {
                    "label": "Ruby",
                    "number": 2.282795779232972
                },
                {
                    "label": "Clojure",
                    "number": 2.267914892132298
                },
                {
                    "label": "D",
                    "number": 2.2328980309899182
                },
                {
                    "label": "Dart",
                    "number": 2.2030313711667255
                }
            ],
            "answer": "Go",
            "answerValue": 2.9694171023735403,
            "question": "Developers of which programming language clean up their comments the most?",
            "rowIndex": 290,
            "approved": true,
            "params": {
                "regex": "remove comment",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'remove comment') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'remove comment') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Nauru",
                    "number": 3.2859832277939414
                },
                {
                    "label": "Vanuatu",
                    "number": 2.6664702416028283
                },
                {
                    "label": "Botswana",
                    "number": 2.610099951988128
                },
                {
                    "label": "Zambia",
                    "number": 2.593852948629765
                },
                {
                    "label": "Burundi",
                    "number": 2.5023882814987792
                },
                {
                    "label": "Estonia",
                    "number": 2.423284604240748
                },
                {
                    "label": "Ghana",
                    "number": 2.378803769013764
                },
                {
                    "label": "Guinea-Bissau",
                    "number": 2.261221734728316
                },
                {
                    "label": "Australia",
                    "number": 2.257467803139979
                },
                {
                    "label": "New Zealand",
                    "number": 2.250073006911321
                }
            ],
            "answer": "Nauru",
            "answerValue": 3.2859832277939414,
            "question": "Officials of which country made the most pessimistic statements last year?",
            "rowIndex": 291,
            "approved": true,
            "params": {
                "codes": "('012')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('012') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('012') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821141
        },
        {
            "top10": [
                {
                    "label": "Antigua and Barbuda",
                    "number": 3.7137191274562826
                },
                {
                    "label": "Luxembourg",
                    "number": 3.6345156315715688
                },
                {
                    "label": "Georgia",
                    "number": 3.5460992907801416
                },
                {
                    "label": "Comoros",
                    "number": 3.4870641169853767
                },
                {
                    "label": "Papua New Guinea",
                    "number": 3.439406627587032
                },
                {
                    "label": "Anguilla",
                    "number": 3.4033309196234613
                },
                {
                    "label": "Madagascar",
                    "number": 3.1140350877192984
                },
                {
                    "label": "Cook Islands",
                    "number": 3.056768558951965
                },
                {
                    "label": "Trinidad and Tobago",
                    "number": 3.055904522613065
                },
                {
                    "label": "Burkina Faso",
                    "number": 2.9885057471264367
                }
            ],
            "answer": "Antigua and Barbuda",
            "answerValue": 3.7137191274562826,
            "question": "Officials of which country made the most optimistic statements last year?",
            "rowIndex": 292,
            "approved": true,
            "params": {
                "codes": "('013')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('013') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('013') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821141
        },
        {
            "top10": [
                {
                    "label": "Scala",
                    "number": 2.0765206194226975
                },
                {
                    "label": "F#",
                    "number": 1.8972022014577221
                },
                {
                    "label": "Go",
                    "number": 1.7185894953984528
                },
                {
                    "label": "Dart",
                    "number": 1.6831159675713783
                },
                {
                    "label": "Clojure",
                    "number": 1.5380388205970286
                },
                {
                    "label": "C#",
                    "number": 1.4718724847174318
                },
                {
                    "label": "Haskell",
                    "number": 1.4053836558966724
                },
                {
                    "label": "Rust",
                    "number": 1.3954722789882958
                },
                {
                    "label": "Java",
                    "number": 1.3830075102161161
                },
                {
                    "label": "Groovy",
                    "number": 1.3747903543277236
                }
            ],
            "answer": "Scala",
            "answerValue": 2.0765206194226975,
            "question": "Developers of which programming language refactor the most?",
            "rowIndex": 293,
            "approved": true,
            "params": {
                "regex": "refactor",
                "per": 100,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'refactor') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'refactor') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "% of Commits",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Ryan Reynolds",
                    "number": 1474542
                },
                {
                    "label": "Charlie Chaplin",
                    "number": 1288219
                },
                {
                    "label": "Bill Nye",
                    "number": 1039163
                },
                {
                    "label": "Jackie Chan",
                    "number": 940048
                },
                {
                    "label": "Ellen DeGeneres",
                    "number": 891511
                },
                {
                    "label": "Ashton Kutcher",
                    "number": 841175
                },
                {
                    "label": "Jim Carrey",
                    "number": 814898
                },
                {
                    "label": "Woody Allen",
                    "number": 784473
                },
                {
                    "label": "Hugh Laurie",
                    "number": 726125
                },
                {
                    "label": "Gwyneth Paltrow",
                    "number": 725708
                }
            ],
            "answer": "Ryan Reynolds",
            "answerValue": 1474542,
            "question": "Who was the most popular comedic actor or actress in the past month?",
            "rowIndex": 261,
            "approved": true,
            "params": {
                "freebase_tag": "comedians"
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.comedians]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.comedians]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name = 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6577393328
        },
        {
            "top10": [
                {
                    "label": "Kuwait",
                    "number": 9.541452858337296
                },
                {
                    "label": "Bahrain",
                    "number": 8.40923385124275
                },
                {
                    "label": "Anguilla",
                    "number": 7.24112961622013
                },
                {
                    "label": "Saudi Arabia",
                    "number": 6.753160680035749
                },
                {
                    "label": "Armenia",
                    "number": 6.674316145363452
                },
                {
                    "label": "Mauritania",
                    "number": 5.926901547579848
                },
                {
                    "label": "Morocco",
                    "number": 5.90697492469585
                },
                {
                    "label": "Tajikistan",
                    "number": 5.574874427333444
                },
                {
                    "label": "Mali",
                    "number": 5.533645174111101
                },
                {
                    "label": "United Arab Emirates",
                    "number": 5.486549222496307
                }
            ],
            "answer": "Kuwait",
            "answerValue": 9.541452858337296,
            "question": "Which country showed the most empathy last year?",
            "rowIndex": 294,
            "approved": true,
            "params": {
                "codes": "('018')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('018') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('018') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "Sao Tome and Principe",
                    "number": 3.7593984962406015
                },
                {
                    "label": "Samoa",
                    "number": 1.076555023923445
                },
                {
                    "label": "Croatia",
                    "number": 0.9102886573242305
                },
                {
                    "label": "Belarus",
                    "number": 0.7748051592908254
                },
                {
                    "label": "Peru",
                    "number": 0.7103253684812849
                },
                {
                    "label": "Algeria",
                    "number": 0.4035003656722064
                },
                {
                    "label": "Bahrain",
                    "number": 0.3960027021360852
                },
                {
                    "label": "Azerbaijan",
                    "number": 0.37942809837535785
                },
                {
                    "label": "Macedonia",
                    "number": 0.3632880874533505
                },
                {
                    "label": "Tajikistan",
                    "number": 0.35877904730363747
                }
            ],
            "answer": "Sao Tome and Principe",
            "answerValue": 3.7593984962406015,
            "question": "Which country is the most agreeable in their media?",
            "rowIndex": 296,
            "approved": true,
            "params": {
                "codes": "('019')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('019') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('019') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "Erlang",
                    "number": 6.448707556516257
                },
                {
                    "label": "F#",
                    "number": 5.94988573514895
                },
                {
                    "label": "Clojure",
                    "number": 5.6261734824051235
                },
                {
                    "label": "Rust",
                    "number": 5.414156426656758
                },
                {
                    "label": "Scheme",
                    "number": 5.341569061631995
                },
                {
                    "label": "Scala",
                    "number": 5.126809964437498
                },
                {
                    "label": "CoffeeScript",
                    "number": 4.592680977520628
                },
                {
                    "label": "Elixir",
                    "number": 4.53228762291367
                },
                {
                    "label": "XSLT",
                    "number": 4.429473510718296
                },
                {
                    "label": "TypeScript",
                    "number": 4.422290528108843
                }
            ],
            "answer": "Erlang",
            "answerValue": 6.448707556516257,
            "question": "Which programming language quickly fixes committed mistakes most often?",
            "rowIndex": 297,
            "approved": true,
            "params": {
                "regex": "fix broken",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'fix broken') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'fix broken') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Russia",
                    "number": 2568
                },
                {
                    "label": "United Kingdom",
                    "number": 2068
                },
                {
                    "label": "France",
                    "number": 2023
                },
                {
                    "label": "Nigeria",
                    "number": 1722
                },
                {
                    "label": "Germany",
                    "number": 1630
                },
                {
                    "label": "Turkey",
                    "number": 1260
                },
                {
                    "label": "Pakistan",
                    "number": 1193
                },
                {
                    "label": "Israel",
                    "number": 1060
                },
                {
                    "label": "Canada",
                    "number": 1005
                },
                {
                    "label": "China",
                    "number": 969
                }
            ],
            "answer": "Russia",
            "answerValue": 2568,
            "question": "Which country, besides the United States, called other countries on the phone the most?",
            "rowIndex": 298,
            "approved": true,
            "params": {
                "codes": "('041')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "filter_us": true
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('041') THEN 1 ELSE 0 END) total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015 \n  AND codes.country != 'United States'\nGROUP BY\n  codes.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  'userInput',\n  COUNT(*)\nFROM (\n  SELECT\n    events.GLOBALEVENTID,\n  FROM\n    [gdelt-bq:full.events] events\n  JOIN\n    [gdelt-bq:extra.countryinfo] codes\n  ON\n    events.Actor1CountryCode = codes.iso3\n  JOIN (\n    SELECT\n      *\n    FROM (\n      SELECT\n        sub,\n        obj AS alias,\n        CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n        SUM(input) OVER (PARTITION BY sub) AS input_alias\n      FROM\n        [fh-bigquery:freebase20140119.triples_lang_en]\n      WHERE\n        (pred = '/common/topic/alias'\n          OR pred = '/type/object/name'))\n    WHERE\n      input_alias > 0) aliases\n  ON\n    aliases.alias = codes.country\n  WHERE\n    Year = 2015\n    AND events.EventCode IN ('041') \n  AND codes.country != 'United States'\n  GROUP BY\n    events.GLOBALEVENTID)\n  IGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579150
        },
        {
            "top10": [
                {
                    "label": "Erlang",
                    "number": 6.448707556516257
                },
                {
                    "label": "F#",
                    "number": 5.94988573514895
                },
                {
                    "label": "Clojure",
                    "number": 5.6261734824051235
                },
                {
                    "label": "Rust",
                    "number": 5.414156426656758
                },
                {
                    "label": "Scheme",
                    "number": 5.341569061631995
                },
                {
                    "label": "Scala",
                    "number": 5.126809964437498
                },
                {
                    "label": "CoffeeScript",
                    "number": 4.592680977520628
                },
                {
                    "label": "Elixir",
                    "number": 4.53228762291367
                },
                {
                    "label": "XSLT",
                    "number": 4.429473510718296
                },
                {
                    "label": "TypeScript",
                    "number": 4.422290528108843
                }
            ],
            "answer": "Erlang",
            "answerValue": 6.448707556516257,
            "question": "Which programming language adds polyfills the most?",
            "rowIndex": 299,
            "approved": true,
            "params": {
                "regex": "fix broken",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'fix broken') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'fix broken') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Pizza",
                    "number": 379745
                },
                {
                    "label": "Indian cuisine",
                    "number": 77241
                },
                {
                    "label": "French food",
                    "number": 71206
                },
                {
                    "label": "Japanese Cuisine",
                    "number": 68539
                },
                {
                    "label": "Italian food",
                    "number": 63159
                },
                {
                    "label": "Chinese food",
                    "number": 60142
                },
                {
                    "label": "Cuisine of the United States",
                    "number": 57712
                },
                {
                    "label": "Korean food",
                    "number": 48920
                },
                {
                    "label": "Thai food",
                    "number": 44171
                },
                {
                    "label": "German food",
                    "number": 40649
                }
            ],
            "answer": "Pizza",
            "answerValue": 379745,
            "question": "What was the most popular type of cuisine in the past month?",
            "rowIndex": 277,
            "approved": true,
            "params": {
                "freebase_tag": "food_cuisine",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.food_cuisine]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.food_cuisine]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6523605503
        },
        {
            "top10": [
                {
                    "label": "F#",
                    "number": 1.3522467579883977
                },
                {
                    "label": "D",
                    "number": 0.6766357669666418
                },
                {
                    "label": "Arduino",
                    "number": 0.6702862122126148
                },
                {
                    "label": "C",
                    "number": 0.36718586258054403
                },
                {
                    "label": "Erlang",
                    "number": 0.3602629919841484
                },
                {
                    "label": "CoffeeScript",
                    "number": 0.22513142046669743
                },
                {
                    "label": "Python",
                    "number": 0.219140275133746
                },
                {
                    "label": "Java",
                    "number": 0.21715241047017236
                },
                {
                    "label": "Scala",
                    "number": 0.21677843401427052
                },
                {
                    "label": "C++",
                    "number": 0.20903750119706632
                }
            ],
            "answer": "F#",
            "answerValue": 1.3522467579883977,
            "question": "Developers of which programming language are shocked the most?",
            "rowIndex": 301,
            "approved": true,
            "params": {
                "regex": "what the actual ",
                "per": 100000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'what the actual ') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'what the actual ') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 100,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Haxe",
                    "number": 1.7414321538032878
                },
                {
                    "label": "Swift",
                    "number": 0.861341280642216
                },
                {
                    "label": "Puppet",
                    "number": 0.6239607154333563
                },
                {
                    "label": "Groovy",
                    "number": 0.6065697570384838
                },
                {
                    "label": "Go",
                    "number": 0.5246319968857844
                },
                {
                    "label": "Ruby",
                    "number": 0.44727606765008326
                },
                {
                    "label": "Scala",
                    "number": 0.32516765102140577
                },
                {
                    "label": "Objective-C",
                    "number": 0.26641741837081306
                },
                {
                    "label": "Python",
                    "number": 0.25827246712191493
                },
                {
                    "label": "Clojure",
                    "number": 0.21806873962810558
                }
            ],
            "answer": "Haxe",
            "answerValue": 1.7414321538032878,
            "question": "Developers of which programming language accidentally commit the most credentials?",
            "rowIndex": 302,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(remove credentials)\\b",
                "per": 100000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(remove credentials)\\b') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(remove credentials)\\b') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 100,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Frying pan",
                    "number": 63367
                },
                {
                    "label": "Wok",
                    "number": 16280
                },
                {
                    "label": "Dutch oven",
                    "number": 12033
                },
                {
                    "label": "Kitchen knife",
                    "number": 11291
                },
                {
                    "label": "Parchment paper",
                    "number": 7779
                },
                {
                    "label": "Cast-iron cookware",
                    "number": 6796
                },
                {
                    "label": "Cutting board",
                    "number": 5004
                },
                {
                    "label": "Mixer",
                    "number": 4000
                },
                {
                    "label": "Juicer",
                    "number": 3220
                },
                {
                    "label": "Sheet pan",
                    "number": 2852
                }
            ],
            "answer": "Frying pan",
            "answerValue": 63367,
            "question": "What was the most popular kitchen tool in the past month?",
            "rowIndex": 279,
            "approved": true,
            "params": {
                "freebase_tag": "kitchen_utensils",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.kitchen_utensils]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.kitchen_utensils]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6521752252
        },
        {
            "top10": [
                {
                    "label": "Chicago Cubs",
                    "number": 417046
                },
                {
                    "label": "New York Yankees",
                    "number": 343820
                },
                {
                    "label": "Boston Red Sox",
                    "number": 258290
                },
                {
                    "label": "Oakland Athletics",
                    "number": 230194
                },
                {
                    "label": "Toronto Blue Jays",
                    "number": 207533
                },
                {
                    "label": "Detroit Tigers",
                    "number": 204936
                },
                {
                    "label": "Cincinnati Reds",
                    "number": 204828
                },
                {
                    "label": "San Francisco Giants",
                    "number": 196971
                },
                {
                    "label": "Los Angeles Dodgers",
                    "number": 189577
                },
                {
                    "label": "Atlanta Braves",
                    "number": 188006
                }
            ],
            "answer": "Chicago Cubs",
            "answerValue": 417046,
            "question": "What was the most popular baseball team of the past month?",
            "rowIndex": 275,
            "approved": true,
            "params": {
                "freebase_tag": "baseball_teams",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.baseball_teams]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.baseball_teams]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6528081570
        },
        {
            "top10": [
                {
                    "label": "Golden State Warriors",
                    "number": 693429
                },
                {
                    "label": "Los Angeles Lakers",
                    "number": 454051
                },
                {
                    "label": "Chicago Bulls",
                    "number": 386329
                },
                {
                    "label": "Miami Heat",
                    "number": 364344
                },
                {
                    "label": "Boston Celtics",
                    "number": 334483
                },
                {
                    "label": "Toronto Raptors",
                    "number": 269825
                },
                {
                    "label": "Cleveland Cavaliers",
                    "number": 209929
                },
                {
                    "label": "Detroit Pistons",
                    "number": 188606
                },
                {
                    "label": "Oklahoma City Thunder",
                    "number": 177535
                },
                {
                    "label": "New York Knicks",
                    "number": 171253
                }
            ],
            "answer": "Golden State Warriors",
            "answerValue": 693429,
            "question": "What was the most popular pro basketball team of the past month?",
            "rowIndex": 276,
            "approved": true,
            "params": {
                "freebase_tag": "basketball_teams",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.basketball_teams]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.basketball_teams]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6530118773
        },
        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 4.09982174688057
                },
                {
                    "label": "Moldova",
                    "number": 2.610948258231645
                },
                {
                    "label": "Niger",
                    "number": 2.578350744609913
                },
                {
                    "label": "Burkina Faso",
                    "number": 2.257799671592775
                },
                {
                    "label": "Cameroon",
                    "number": 2.1497738949262497
                },
                {
                    "label": "Guinea-Bissau",
                    "number": 2.0587242659466756
                },
                {
                    "label": "Georgia",
                    "number": 1.9250253292806485
                },
                {
                    "label": "Zambia",
                    "number": 1.8951598305759694
                },
                {
                    "label": "Swaziland",
                    "number": 1.8194380469829572
                },
                {
                    "label": "India",
                    "number": 1.781373556395753
                }
            ],
            "answer": "Benin",
            "answerValue": 4.09982174688057,
            "question": "Which country made the most demands for economic, military and/or humanitarian aid?",
            "rowIndex": 305,
            "approved": true,
            "params": {
                "codes": "('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821141
        },
        {
            "top10": [
                {
                    "label": "Cape Verde",
                    "number": 9.248242293131423
                },
                {
                    "label": "Madagascar",
                    "number": 3.5483274810571057
                },
                {
                    "label": "Bahamas",
                    "number": 3.303081807395055
                },
                {
                    "label": "Maldives",
                    "number": 3.27296
                },
                {
                    "label": "Andorra",
                    "number": 2.8477546549835706
                },
                {
                    "label": "Malaysia",
                    "number": 2.663390487122462
                },
                {
                    "label": "Nauru",
                    "number": 2.508827355510128
                },
                {
                    "label": "Peru",
                    "number": 2.1769143533356345
                },
                {
                    "label": "Gabon",
                    "number": 2.037665946279716
                },
                {
                    "label": "Brazil",
                    "number": 2.0320581416087036
                }
            ],
            "answer": "Cape Verde",
            "answerValue": 9.248242293131423,
            "question": "Which country was involved in the most investigations last year?",
            "rowIndex": 307,
            "approved": true,
            "params": {
                "codes": "('090','091','092','093','094')",
                "relation": "Actor2CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('090','091','092','093','094') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor2CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('090','091','092','093','094') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor2CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT ",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380578805
        },
        {
            "top10": [
                {
                    "label": "Hong Kong",
                    "number": 20.79636888797194
                },
                {
                    "label": "Venezuela",
                    "number": 10.587039693926352
                },
                {
                    "label": "Guinea-Bissau",
                    "number": 10.496118798515019
                },
                {
                    "label": "Zimbabwe",
                    "number": 9.34741142114414
                },
                {
                    "label": "Albania",
                    "number": 9.223916271321478
                },
                {
                    "label": "Argentina",
                    "number": 8.899516270888302
                },
                {
                    "label": "India",
                    "number": 8.395766203449686
                },
                {
                    "label": "Bahrain",
                    "number": 8.318192406242721
                },
                {
                    "label": "Nigeria",
                    "number": 8.175644888660248
                },
                {
                    "label": "Georgia",
                    "number": 8.00405268490375
                }
            ],
            "answer": "Hong Kong",
            "answerValue": 20.79636888797194,
            "question": "Which country was the most disapproving last year?",
            "rowIndex": 308,
            "approved": true,
            "params": {
                "codes": "('110','111','112','1121','1122','1123','1124','1125','113','114','115','116')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('110','111','112','1121','1122','1123','1124','1125','113','114','115','116') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('110','111','112','1121','1122','1123','1124','1125','113','114','115','116') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821141
        },
        {
            "top10": [
                {
                    "label": "Kit Kat",
                    "number": 78829
                },
                {
                    "label": "Snickers",
                    "number": 73770
                },
                {
                    "label": "Toblerone",
                    "number": 42211
                },
                {
                    "label": "Twix",
                    "number": 37401
                },
                {
                    "label": "Ritter Sport",
                    "number": 22188
                },
                {
                    "label": "Mars",
                    "number": 17507
                },
                {
                    "label": "Cadbury Creme Egg",
                    "number": 17131
                },
                {
                    "label": "Daim bar",
                    "number": 13226
                },
                {
                    "label": "Milky Way",
                    "number": 8156
                },
                {
                    "label": "Hershey bar",
                    "number": 7839
                }
            ],
            "answer": "Kit Kat",
            "answerValue": 78829,
            "question": "What was the most popular candy bar on Wikipedia last month?",
            "rowIndex": 280,
            "approved": true,
            "params": {
                "freebase_tag": "candy_bars"
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.candy_bars]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.candy_bars]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name = 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6523188799
        },
        {
            "top10": [
                {
                    "label": "Parmigiano-Reggiano",
                    "number": 137986
                },
                {
                    "label": "Raclette",
                    "number": 91061
                },
                {
                    "label": "Casu marzu",
                    "number": 91051
                },
                {
                    "label": "Halloumi",
                    "number": 79149
                },
                {
                    "label": "Mozzarella",
                    "number": 78085
                },
                {
                    "label": "Ricotta",
                    "number": 70056
                },
                {
                    "label": "Mascarpone",
                    "number": 64849
                },
                {
                    "label": "Feta",
                    "number": 57100
                },
                {
                    "label": "Grana Padano",
                    "number": 45026
                },
                {
                    "label": "Cheddar cheese",
                    "number": 36127
                }
            ],
            "answer": "Parmigiano-Reggiano",
            "answerValue": 137986,
            "question": "What was the most popular cheese in the past month?",
            "rowIndex": 281,
            "approved": true,
            "params": {
                "freebase_tag": "cheese",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.cheese]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.cheese]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6528321309
        },
        {
            "top10": [
                {
                    "label": "Chris Cornell",
                    "number": 290044
                },
                {
                    "label": "Gordon Ramsay",
                    "number": 235016
                },
                {
                    "label": "Vincent Price",
                    "number": 200371
                },
                {
                    "label": "Jamie Oliver",
                    "number": 155087
                },
                {
                    "label": "Julia Child",
                    "number": 150956
                },
                {
                    "label": "Auguste Escoffier",
                    "number": 107520
                },
                {
                    "label": "Dom DeLuise",
                    "number": 68277
                },
                {
                    "label": "Anthony Bourdain",
                    "number": 66063
                },
                {
                    "label": "Action Bronson",
                    "number": 52967
                },
                {
                    "label": "Bas Rutten",
                    "number": 44241
                }
            ],
            "answer": "Chris Cornell",
            "answerValue": 290044,
            "question": "Who was the most popular chef in the past month?",
            "rowIndex": 284,
            "approved": true,
            "params": {
                "freebase_tag": "chefs",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.chefs]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.chefs]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6530924877
        },
        {
            "top10": [
                {
                    "label": "Leonardo da Vinci",
                    "number": 4009781
                },
                {
                    "label": "Steve Jobs",
                    "number": 2467344
                },
                {
                    "label": "Elon Musk",
                    "number": 2020352
                },
                {
                    "label": "Nikola Tesla",
                    "number": 1901347
                },
                {
                    "label": "Benjamin Franklin",
                    "number": 1227218
                },
                {
                    "label": "Thomas Edison",
                    "number": 1218853
                },
                {
                    "label": "Thomas Jefferson",
                    "number": 1061515
                },
                {
                    "label": "Henry Ford",
                    "number": 699767
                },
                {
                    "label": "Alexander Graham Bell",
                    "number": 623665
                },
                {
                    "label": "James Cameron",
                    "number": 584694
                }
            ],
            "answer": "Leonardo da Vinci",
            "answerValue": 4009781,
            "question": "Who was the most popular inventor in the past month?",
            "rowIndex": 285,
            "approved": true,
            "params": {
                "freebase_tag": "inventors",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.inventors]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.inventors]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6543840722
        },
        {
            "top10": [
                {
                    "label": "Mojito",
                    "number": 86839
                },
                {
                    "label": "Martini",
                    "number": 86013
                },
                {
                    "label": "Long Island Iced Tea",
                    "number": 62350
                },
                {
                    "label": "Moscow mule",
                    "number": 57129
                },
                {
                    "label": "Caipirinha",
                    "number": 52199
                },
                {
                    "label": "Cuba Libre",
                    "number": 47984
                },
                {
                    "label": "Negroni",
                    "number": 46305
                },
                {
                    "label": "Mint julep",
                    "number": 43547
                },
                {
                    "label": "Margarita",
                    "number": 36346
                },
                {
                    "label": "Gin and tonic",
                    "number": 35842
                }
            ],
            "answer": "Mojito",
            "answerValue": 86839,
            "question": "What was the most popular cocktail on Wikipedia in the last month?",
            "rowIndex": 321,
            "approved": true,
            "params": {
                "freebase_tag": "cocktails",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.cocktails]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.cocktails]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6525252054
        },
        {
            "top10": [
                {
                    "label": "Magic Johnson",
                    "number": 453854
                },
                {
                    "label": "Diego Maradona",
                    "number": 393881
                },
                {
                    "label": "Jeremy Clarkson",
                    "number": 264972
                },
                {
                    "label": "Jon Stewart",
                    "number": 245551
                },
                {
                    "label": "Whoopi Goldberg",
                    "number": 240067
                },
                {
                    "label": "David Letterman",
                    "number": 212025
                },
                {
                    "label": "Jimmy Kimmel",
                    "number": 191246
                },
                {
                    "label": "George Lopez",
                    "number": 156669
                },
                {
                    "label": "Larry King",
                    "number": 152765
                },
                {
                    "label": "Howard Stern",
                    "number": 136871
                }
            ],
            "answer": "Magic Johnson",
            "answerValue": 453854,
            "question": "What talk show host was viewed the most in the past month?",
            "rowIndex": 322,
            "approved": true,
            "params": {
                "freebase_tag": "talk_show_hosts",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.talk_show_hosts]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.talk_show_hosts]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6525577613
        },
        {
            "top10": [
                {
                    "label": "Jean-Luc Picard",
                    "number": 90883
                },
                {
                    "label": "Leonard McCoy",
                    "number": 70014
                },
                {
                    "label": "Spock",
                    "number": 57994
                },
                {
                    "label": "Data",
                    "number": 44334
                },
                {
                    "label": "Geordi La Forge",
                    "number": 32117
                },
                {
                    "label": "Jadzia Dax",
                    "number": 29069
                },
                {
                    "label": "Seven of Nine",
                    "number": 23091
                },
                {
                    "label": "William Riker",
                    "number": 20154
                },
                {
                    "label": "Khan Noonien Singh",
                    "number": 19668
                },
                {
                    "label": "Worf",
                    "number": 19540
                }
            ],
            "answer": "Jean-Luc Picard",
            "answerValue": 90883,
            "question": "Who was the most popular Star Trek character on Wikipedia in the past month?",
            "rowIndex": 319,
            "approved": true,
            "params": {
                "freebase_tag": "star_trek_characters",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.star_trek_characters]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.star_trek_characters]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6523376043
        },
        {
            "top10": [
                {
                    "label": "Kermit the Frog",
                    "number": 50335
                },
                {
                    "label": "Gonzo",
                    "number": 12387
                },
                {
                    "label": "Swedish Chef",
                    "number": 11161
                },
                {
                    "label": "Beaker",
                    "number": 9492
                },
                {
                    "label": "Miss Piggy",
                    "number": 9270
                },
                {
                    "label": "Statler and Waldorf",
                    "number": 8244
                },
                {
                    "label": "Animal",
                    "number": 7892
                },
                {
                    "label": "Rowlf the Dog",
                    "number": 5711
                },
                {
                    "label": "Rizzo the Rat",
                    "number": 5385
                },
                {
                    "label": "Fozzie Bear",
                    "number": 4909
                }
            ],
            "answer": "Kermit the Frog",
            "answerValue": 50335,
            "question": "Who is the most popular Muppet on Wikipedia?",
            "rowIndex": 320,
            "approved": true,
            "params": {
                "freebase_tag": "muppet",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.muppet]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.muppet]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6521677778
        },
        {
            "top10": [
                {
                    "label": "KFC",
                    "number": 421611
                },
                {
                    "label": "Burger King",
                    "number": 287731
                },
                {
                    "label": "Taco Bell",
                    "number": 147477
                },
                {
                    "label": "Pizza Hut",
                    "number": 137133
                },
                {
                    "label": "Chick-fil-A",
                    "number": 93669
                },
                {
                    "label": "In-N-Out Burger",
                    "number": 88328
                },
                {
                    "label": "Chipotle Mexican Grill",
                    "number": 74430
                },
                {
                    "label": "McDonald's",
                    "number": 64643
                },
                {
                    "label": "Dairy Queen",
                    "number": 60325
                },
                {
                    "label": "Tim Hortons",
                    "number": 55673
                }
            ],
            "answer": "KFC",
            "answerValue": 421611,
            "question": "What fast food chain was the most popular in the past month?",
            "rowIndex": 317,
            "approved": true,
            "params": {
                "freebase_tag": "fast_food",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.fast_food]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.fast_food]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6526442077
        },
        {
            "top10": [
                {
                    "label": "Blackjack",
                    "number": 136535
                },
                {
                    "label": "Poker",
                    "number": 127428
                },
                {
                    "label": "Contract bridge",
                    "number": 72844
                },
                {
                    "label": "FreeCell",
                    "number": 23508
                },
                {
                    "label": "Gin rummy",
                    "number": 17080
                },
                {
                    "label": "Canasta",
                    "number": 12213
                },
                {
                    "label": "Euchre",
                    "number": 11879
                },
                {
                    "label": "Whist",
                    "number": 9664
                },
                {
                    "label": "Belote",
                    "number": 6829
                },
                {
                    "label": "Pinochle",
                    "number": 6454
                }
            ],
            "answer": "Blackjack",
            "answerValue": 136535,
            "question": "What was the most popular card game on Wikipedia last month?",
            "rowIndex": 313,
            "approved": true,
            "params": {
                "freebase_tag": "card_games",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.card_games]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.card_games]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6522345107
        },
        {
            "top10": [
                {
                    "label": "Earth Day",
                    "number": 1188690
                },
                {
                    "label": "Cinco de Mayo",
                    "number": 694330
                },
                {
                    "label": "Anzac Day",
                    "number": 482814
                },
                {
                    "label": "420",
                    "number": 464362
                },
                {
                    "label": "Passover",
                    "number": 426883
                },
                {
                    "label": "Day of the Dead",
                    "number": 273695
                },
                {
                    "label": "April Fools' Day",
                    "number": 210255
                },
                {
                    "label": "Halloween",
                    "number": 196296
                },
                {
                    "label": "Memorial Day",
                    "number": 193612
                },
                {
                    "label": "Christmas",
                    "number": 184288
                }
            ],
            "answer": "Earth Day",
            "answerValue": 1188690,
            "question": "What holiday was the most popular in the past month?",
            "rowIndex": 318,
            "approved": true,
            "params": {
                "freebase_tag": "holidays"
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.holidays]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.holidays]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name = 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6532211859
        },
        {
            "top10": [
                {
                    "label": "Yemen",
                    "number": 41538
                },
                {
                    "label": "Iran",
                    "number": 33250
                },
                {
                    "label": "United States",
                    "number": 30094
                },
                {
                    "label": "Pakistan",
                    "number": 14675
                },
                {
                    "label": "Syria",
                    "number": 12682
                },
                {
                    "label": "Russia",
                    "number": 10720
                },
                {
                    "label": "Egypt",
                    "number": 10472
                },
                {
                    "label": "Turkey",
                    "number": 9220
                },
                {
                    "label": "United Kingdom",
                    "number": 7154
                },
                {
                    "label": "Qatar",
                    "number": 6475
                }
            ],
            "answer": "Yemen",
            "answerValue": 41538,
            "question": "Which country was mentioned with Saudi Arabia the most last year?",
            "rowIndex": 341,
            "approved": true,
            "params": {
                "country": "Saudi Arabia",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Saudi Arabia' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Saudi Arabia' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761319763
        },
        {
            "top10": [
                {
                    "label": "Disneyland",
                    "number": 251510
                },
                {
                    "label": "Cedar Point",
                    "number": 71625
                },
                {
                    "label": "Epcot",
                    "number": 70400
                },
                {
                    "label": "Hong Kong Disneyland",
                    "number": 54653
                },
                {
                    "label": "Alton Towers Resort",
                    "number": 35741
                },
                {
                    "label": "Europa-Park",
                    "number": 32249
                },
                {
                    "label": "Universal Studios Singapore",
                    "number": 30734
                },
                {
                    "label": "Magic Kingdom",
                    "number": 29431
                },
                {
                    "label": "SeaWorld Orlando",
                    "number": 29125
                },
                {
                    "label": "Six Flags Magic Mountain",
                    "number": 29077
                }
            ],
            "answer": "Disneyland",
            "answerValue": 251510,
            "question": "What was the most popular amusement park on Wikipedia last month?",
            "rowIndex": 312,
            "approved": true,
            "params": {
                "freebase_tag": "amusement_parks",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.amusement_parks]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.amusement_parks]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6529308847
        },
        {
            "top10": [
                {
                    "label": "Barack Obama",
                    "number": 9881003
                },
                {
                    "label": "Donald Trump",
                    "number": 8981873
                },
                {
                    "label": "Adolf Hitler",
                    "number": 6717961
                },
                {
                    "label": "Hillary Rodham Clinton",
                    "number": 2509391
                },
                {
                    "label": "Mahatma Gandhi",
                    "number": 2176177
                },
                {
                    "label": "Abraham Lincoln",
                    "number": 2053409
                },
                {
                    "label": "Andrew Jackson",
                    "number": 1865590
                },
                {
                    "label": "Winston Churchill",
                    "number": 1805961
                },
                {
                    "label": "Nelson Mandela",
                    "number": 1805960
                },
                {
                    "label": "Ronald Reagan",
                    "number": 1691374
                }
            ],
            "answer": "Barack Obama",
            "answerValue": 9881003,
            "question": "Who was the most popular politician in the past month?",
            "rowIndex": 316,
            "approved": true,
            "params": {
                "freebase_tag": "politicians",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.politicians]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.politicians]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 7231676007
        },
        {
            "top10": [
                {
                    "label": "France",
                    "number": 4317
                },
                {
                    "label": "United States",
                    "number": 3616
                },
                {
                    "label": "Spain",
                    "number": 3012
                },
                {
                    "label": "Algeria",
                    "number": 1611
                },
                {
                    "label": "Libya",
                    "number": 1464
                },
                {
                    "label": "United Kingdom",
                    "number": 1284
                },
                {
                    "label": "Tunisia",
                    "number": 1233
                },
                {
                    "label": "Egypt",
                    "number": 1040
                },
                {
                    "label": "Saudi Arabia",
                    "number": 1006
                },
                {
                    "label": "Italy",
                    "number": 882
                }
            ],
            "answer": "France",
            "answerValue": 4317,
            "question": "Which country was mentioned with Morocco the most last year?",
            "rowIndex": 343,
            "approved": true,
            "params": {
                "country": "Morocco",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Morocco' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Morocco' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761314381
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 3300
                },
                {
                    "label": "Russia",
                    "number": 1866
                },
                {
                    "label": "United States",
                    "number": 1124
                },
                {
                    "label": "South Korea",
                    "number": 901
                },
                {
                    "label": "Japan",
                    "number": 652
                },
                {
                    "label": "Malaysia",
                    "number": 576
                },
                {
                    "label": "Australia",
                    "number": 407
                },
                {
                    "label": "North Korea",
                    "number": 317
                },
                {
                    "label": "United Kingdom",
                    "number": 302
                },
                {
                    "label": "Iran",
                    "number": 217
                }
            ],
            "answer": "China",
            "answerValue": 3300,
            "question": "Which country was mentioned with Mongolia the most last year?",
            "rowIndex": 344,
            "approved": true,
            "params": {
                "country": "Mongolia",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Mongolia' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Mongolia' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761308632
        },
        {
            "top10": [
                {
                    "label": "Pakistan",
                    "number": 49022
                },
                {
                    "label": "United States",
                    "number": 38225
                },
                {
                    "label": "Iraq",
                    "number": 14011
                },
                {
                    "label": "Iran",
                    "number": 6427
                },
                {
                    "label": "United Kingdom",
                    "number": 6399
                },
                {
                    "label": "Russia",
                    "number": 6214
                },
                {
                    "label": "China",
                    "number": 5834
                },
                {
                    "label": "Canada",
                    "number": 3038
                },
                {
                    "label": "Syria",
                    "number": 3019
                },
                {
                    "label": "Germany",
                    "number": 2730
                }
            ],
            "answer": "Pakistan",
            "answerValue": 49022,
            "question": "Which country was mentioned with Afghanistan the most last year?",
            "rowIndex": 345,
            "approved": true,
            "params": {
                "country": "Afghanistan",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Afghanistan' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Afghanistan' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761318012
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 10855
                },
                {
                    "label": "Malaysia",
                    "number": 10150
                },
                {
                    "label": "United States",
                    "number": 7360
                },
                {
                    "label": "Myanmar",
                    "number": 6233
                },
                {
                    "label": "Indonesia",
                    "number": 5997
                },
                {
                    "label": "Vietnam",
                    "number": 4596
                },
                {
                    "label": "Japan",
                    "number": 4455
                },
                {
                    "label": "Cambodia",
                    "number": 4279
                },
                {
                    "label": "Australia",
                    "number": 4236
                },
                {
                    "label": "United Kingdom",
                    "number": 3535
                }
            ],
            "answer": "China",
            "answerValue": 10855,
            "question": "Which country was mentioned with Thailand the most last year?",
            "rowIndex": 348,
            "approved": true,
            "params": {
                "country": "Thailand",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Thailand' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Thailand' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761316252
        },
        {
            "top10": [
                {
                    "label": "Pittsburgh",
                    "number": 8.411277841329655
                },
                {
                    "label": "Portland",
                    "number": 6.710651939835955
                },
                {
                    "label": "Austin",
                    "number": 4.991848973878318
                },
                {
                    "label": "Melbourne",
                    "number": 4.175696009330521
                },
                {
                    "label": "Chicago",
                    "number": 3.13980704458526
                },
                {
                    "label": "London",
                    "number": 2.7767680439436164
                },
                {
                    "label": "New York City",
                    "number": 2.7489347877697394
                },
                {
                    "label": "Atlanta",
                    "number": 2.715463249270767
                },
                {
                    "label": "Philadelphia",
                    "number": 2.6932595719901005
                },
                {
                    "label": "Toronto",
                    "number": 2.5815644280433943
                }
            ],
            "answer": "Pittsburgh",
            "answerValue": 8.411277841329655,
            "question": "Which city's subreddit talked the most about pickles?",
            "rowIndex": 338,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(pickle|pickles|pickled)\\b",
                "per": 10000
            },
            "sql": "\nSELECT\n cities.city,\n SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(pickle|pickles|pickled)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n SELECT\n   body,\n   subreddit\n FROM\n   TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n [subreddits.cities] cities\nON\n comments.subreddit = cities.subreddit\nGROUP BY\n cities.city\nORDER BY\n per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  cities.city,\n  SUM(CASE WHEN REGEXP_MATCH(body, r'(?i)\\b(pickle|pickles|pickled)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per\nFROM (\n  SELECT\n    body,\n    subreddit\n  FROM\n    TABLE_QUERY([fh-bigquery:reddit_comments], 'regexp_match(table_id, \"^(2016|2015_(0[7-9]|1[0-2]))\")')) comments\nJOIN\n  [subreddits.cities] cities\nON\n  comments.subreddit = cities.subreddit\nJOIN\n  [fh-bigquery:freebase20140119.triples_lang_en] aliases\nON\n  aliases.sub = cities.mid\nWHERE\n  (aliases.pred = '/common/topic/alias'\n    OR aliases.pred = '/type/object/name')\n  AND aliases.obj = 'userInput'\nGROUP BY\n  cities.city\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 532396361
        },
        {
            "top10": [
                {
                    "label": "Homer Simpson",
                    "number": 180627
                },
                {
                    "label": "Marge Simpson",
                    "number": 65127
                },
                {
                    "label": "Bart Simpson",
                    "number": 63365
                },
                {
                    "label": "Lisa Simpson",
                    "number": 56715
                },
                {
                    "label": "Milhouse Van Houten",
                    "number": 26028
                },
                {
                    "label": "Troy McClure",
                    "number": 25132
                },
                {
                    "label": "Sideshow Bob",
                    "number": 14388
                },
                {
                    "label": "Waylon Smithers",
                    "number": 14048
                },
                {
                    "label": "Krusty the Clown",
                    "number": 13663
                },
                {
                    "label": "Ned Flanders",
                    "number": 13256
                }
            ],
            "answer": "Homer Simpson",
            "answerValue": 180627,
            "question": "Which of The Simpsons characters was the most popular in the last month?",
            "rowIndex": 325,
            "approved": true,
            "params": {
                "freebase_tag": "simpsons",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.simpsons]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.simpsons]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6522874692
        },
        {
            "top10": [
                {
                    "label": "Zack Snyder",
                    "number": 733
                },
                {
                    "label": "Ben Affleck",
                    "number": 608
                },
                {
                    "label": "Prince",
                    "number": 339
                },
                {
                    "label": "Michael Bay",
                    "number": 211
                },
                {
                    "label": "George Lucas",
                    "number": 186
                },
                {
                    "label": "Tim Burton",
                    "number": 186
                },
                {
                    "label": "Kevin Smith",
                    "number": 164
                },
                {
                    "label": "Tom Hanks",
                    "number": 160
                },
                {
                    "label": "Clint Eastwood",
                    "number": 151
                },
                {
                    "label": "Peter Jackson",
                    "number": 146
                }
            ],
            "answer": "Zack Snyder",
            "answerValue": 733,
            "question": "What director was mentioned in /r/movies the most in the past month?",
            "rowIndex": 66,
            "approved": true,
            "params": {
                "freebase_tag": "directors",
                "subreddit": "movies",
                "top_wiki": 500
            },
            "sql": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.directors]) topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'movies') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  pop_topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    topic_wiki.mid AS mid,\n    topic_wiki.name AS name,\n    SUM(requests) AS total\n  FROM (\n    SELECT\n      topic.mid AS mid,\n      topic.name as name,\n      REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n    FROM (\n      SELECT\n        mid,\n        name\n      FROM\n        [freebase_tags.directors]\n      WHERE\n        name = 'userInput') topic\n    JOIN (\n      SELECT\n        REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n        sub AS mid\n      FROM\n        [fh-bigquery:freebase20140119.triples_nolang]\n      WHERE\n        obj CONTAINS '/wikipedia/en'\n        OR obj CONTAINS '/wikipedia/id'\n        AND pred = '/type/object/key') wiki\n    ON\n      wiki.mid = topic.mid) topic_wiki\n  JOIN\n    [fh-bigquery:wikipedia.pagecounts_201604] views\n  ON\n    views.title = topic_wiki.title\n  GROUP BY\n    mid,\n    name\n  ORDER BY\n    total DESC\n  LIMIT\n    500 ) pop_topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'movies') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', pop_topic.name, ' ')\nGROUP BY\n  pop_topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 6683037572
        },
        {
            "top10": [
                {
                    "label": "Matcha",
                    "number": 118279
                },
                {
                    "label": "Earl Grey tea",
                    "number": 86321
                },
                {
                    "label": "Pu-erh tea",
                    "number": 47465
                },
                {
                    "label": "Darjeeling tea",
                    "number": 28132
                },
                {
                    "label": "Sencha",
                    "number": 22215
                },
                {
                    "label": "Tea leaf grading",
                    "number": 19714
                },
                {
                    "label": "Lapsang souchong",
                    "number": 18791
                },
                {
                    "label": "Assam tea",
                    "number": 13931
                },
                {
                    "label": "Da Hong Pao",
                    "number": 11970
                },
                {
                    "label": "Gunpowder tea",
                    "number": 9384
                }
            ],
            "answer": "Matcha",
            "answerValue": 118279,
            "question": "What was the most popular type of tea in the last month?",
            "rowIndex": 326,
            "approved": true,
            "params": {
                "freebase_tag": "tea",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.tea]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.tea]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6522648777
        },
        {
            "top10": [
                {
                    "label": "Goofy",
                    "number": 49134
                },
                {
                    "label": "Pluto",
                    "number": 42149
                },
                {
                    "label": "Krypto",
                    "number": 18408
                },
                {
                    "label": "Lassie",
                    "number": 18098
                },
                {
                    "label": "Pete",
                    "number": 17064
                },
                {
                    "label": "Brian Griffin",
                    "number": 13457
                },
                {
                    "label": "Spuds MacKenzie",
                    "number": 12035
                },
                {
                    "label": "Spot the Dog",
                    "number": 11680
                },
                {
                    "label": "Droopy Dog",
                    "number": 11358
                },
                {
                    "label": "Taco Bell Chihuahua",
                    "number": 10756
                }
            ],
            "answer": "Goofy",
            "answerValue": 49134,
            "question": "What was the name of the most popular fictional dog last month?",
            "rowIndex": 333,
            "approved": true,
            "params": {
                "freebase_tag": "dogs",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.dogs]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.dogs]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6522743925
        },
        {
            "top10": [
                {
                    "label": "John Cena",
                    "number": 2165973
                },
                {
                    "label": "Eminem",
                    "number": 1631818
                },
                {
                    "label": "Will Smith",
                    "number": 1485934
                },
                {
                    "label": "Kanye West",
                    "number": 1340778
                },
                {
                    "label": "Tupac Shakur",
                    "number": 1114474
                },
                {
                    "label": "Snoop Dogg",
                    "number": 1111074
                },
                {
                    "label": "Mark Wahlberg",
                    "number": 1043931
                },
                {
                    "label": "Allen Iverson",
                    "number": 998955
                },
                {
                    "label": "50 Cent",
                    "number": 921191
                },
                {
                    "label": "Jay-Z",
                    "number": 898023
                }
            ],
            "answer": "John Cena",
            "answerValue": 2165973,
            "question": "Who was the most popular rapper in the last month?",
            "rowIndex": 324,
            "approved": true,
            "params": {
                "freebase_tag": "rappers"
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.rappers]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.rappers]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name = 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6564151547
        },
        {
            "top10": [
                {
                    "label": "USB",
                    "number": 1601638
                },
                {
                    "label": "Wi-Fi",
                    "number": 1573236
                },
                {
                    "label": "HDMI",
                    "number": 828062
                },
                {
                    "label": "RAID",
                    "number": 767058
                },
                {
                    "label": "AK-47",
                    "number": 724808
                },
                {
                    "label": "Internet Protocol",
                    "number": 630096
                },
                {
                    "label": "ARPANET",
                    "number": 521402
                },
                {
                    "label": "Light-emitting diode",
                    "number": 436860
                },
                {
                    "label": "Periodic Table",
                    "number": 397429
                },
                {
                    "label": "Laser",
                    "number": 394789
                }
            ],
            "answer": "USB",
            "answerValue": 1601638,
            "question": "What invention had the most pageviews in the past month?",
            "rowIndex": 328,
            "approved": true,
            "params": {
                "freebase_tag": "invention",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.invention]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.invention]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6558466859
        },
        {
            "top10": [
                {
                    "label": "Usain Bolt",
                    "number": 596540
                },
                {
                    "label": "Michael Phelps",
                    "number": 442962
                },
                {
                    "label": "Jesse Owens",
                    "number": 297148
                },
                {
                    "label": "Anthony Joshua",
                    "number": 273957
                },
                {
                    "label": "Zara Phillips",
                    "number": 268692
                },
                {
                    "label": "Daniel Cormier",
                    "number": 192016
                },
                {
                    "label": "Peter Sagan",
                    "number": 116730
                },
                {
                    "label": "Oscar Pistorius",
                    "number": 115759
                },
                {
                    "label": "Carl Lewis",
                    "number": 104872
                },
                {
                    "label": "Boy Charlton",
                    "number": 94594
                }
            ],
            "answer": "Usain Bolt",
            "answerValue": 596540,
            "question": "Who was the most popular Olympic Athlete in the past month?",
            "rowIndex": 330,
            "approved": true,
            "params": {
                "freebase_tag": "olympic_athletes",
                "substring": true
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.olympic_athletes]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.olympic_athletes]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name CONTAINS 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6997763844
        },
        {
            "top10": [
                {
                    "label": "YouTube",
                    "number": 6889664
                },
                {
                    "label": "Google",
                    "number": 4900711
                },
                {
                    "label": "Tesla Motors",
                    "number": 1756510
                },
                {
                    "label": "Netflix",
                    "number": 934544
                },
                {
                    "label": "PayPal",
                    "number": 834239
                },
                {
                    "label": "The Walt Disney Company",
                    "number": 793865
                },
                {
                    "label": "eBay",
                    "number": 734487
                },
                {
                    "label": "Myspace",
                    "number": 646867
                },
                {
                    "label": "SpaceX",
                    "number": 628110
                },
                {
                    "label": "Fox Broadcasting Company",
                    "number": 566892
                }
            ],
            "answer": "YouTube",
            "answerValue": 6889664,
            "question": "What California company was viewed the most on Wikipedia last month?",
            "rowIndex": 335,
            "approved": true,
            "params": {
                "freebase_tag": "ca_companies"
            },
            "sql": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.ca_companies]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid) topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic_wiki.name AS name,\n  SUM(requests) AS total\nFROM (\n  SELECT\n    topic.mid AS mid,\n    topic.name AS name,\n    REPLACE(REPLACE(wiki.title, '$0028', '('), '$0029', ')') AS title\n  FROM (\n    SELECT\n      mid,\n      name\n    FROM\n      [freebase_tags.ca_companies]) topic\n  JOIN (\n    SELECT\n      REGEXP_REPLACE(REGEXP_REPLACE(obj, '/wikipedia/en/', ''), '/wikipedia/id/', '') AS title,\n      sub AS mid\n    FROM\n      [fh-bigquery:freebase20140119.triples_nolang]\n    WHERE\n      obj CONTAINS '/wikipedia/en'\n      OR obj CONTAINS '/wikipedia/id'\n      AND pred = '/type/object/key') wiki\n  ON\n    wiki.mid = topic.mid\n  WHERE\n    topic.name = 'userInput') topic_wiki\nJOIN\n  [fh-bigquery:wikipedia.pagecounts_201604] views\nON\n  views.title = topic_wiki.title\nGROUP BY\n  mid,\n  name\nORDER BY\n  total DESC\nLIMIT\n  10\nIGNORE CASE\n",
            "databases": "Wikipedia",
            "units": "Views",
            "hasPassingInputQuery": false,
            "rowsSearched": 6610593525
        },
        {
            "top10": [
                {
                    "label": "Israel",
                    "number": 6700
                },
                {
                    "label": "China",
                    "number": 6607
                },
                {
                    "label": "Russia",
                    "number": 4798
                },
                {
                    "label": "Germany",
                    "number": 3562
                },
                {
                    "label": "Turkey",
                    "number": 3251
                },
                {
                    "label": "Iraq",
                    "number": 2903
                },
                {
                    "label": "Syria",
                    "number": 2673
                },
                {
                    "label": "North Korea",
                    "number": 2664
                },
                {
                    "label": "Japan",
                    "number": 2011
                },
                {
                    "label": "India",
                    "number": 1887
                }
            ],
            "answer": "Israel",
            "answerValue": 6700,
            "question": "Which country was mentioned in /r/worldnews the most in the past month?",
            "rowIndex": 71,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "worldnews"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'worldnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'worldnews') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Comments",
            "hasPassingInputQuery": false,
            "rowsSearched": 64598055
        },
        {
            "top10": [
                {
                    "label": "Israel",
                    "number": 930
                },
                {
                    "label": "Canada",
                    "number": 890
                },
                {
                    "label": "China",
                    "number": 887
                },
                {
                    "label": "Germany",
                    "number": 561
                },
                {
                    "label": "Iraq",
                    "number": 528
                },
                {
                    "label": "India",
                    "number": 461
                },
                {
                    "label": "Mexico",
                    "number": 447
                },
                {
                    "label": "Georgia",
                    "number": 431
                },
                {
                    "label": "Russia",
                    "number": 396
                },
                {
                    "label": "Australia",
                    "number": 360
                }
            ],
            "answer": "Israel",
            "answerValue": 930,
            "question": "Which country was discussed in /r/news the most in the past month?",
            "rowIndex": 70,
            "approved": true,
            "params": {
                "freebase_tag": "countries",
                "subreddit": "news"
            },
            "sql": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM\n  [freebase_tags.countries] topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  topic.name,\n  COUNT(UNIQUE(comments.id)) AS total\nFROM (\n  SELECT\n    *\n  FROM\n    [freebase_tags.countries]\n  WHERE\n    name = 'userInput') topic\nCROSS JOIN (\n  SELECT\n    id,\n    body\n  FROM\n    [fh-bigquery:reddit_comments.2016_03]\n  WHERE\n    subreddit = 'news') comments\nWHERE\n  comments.body CONTAINS CONCAT(' ', topic.name, ' ')\nGROUP BY\n  topic.name,\nORDER BY\n  total DESC IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Mentions",
            "hasPassingInputQuery": false,
            "rowsSearched": 64492277
        }
    ],
    "total": 185
}
